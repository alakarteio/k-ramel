<<<<<<< HEAD
{"version":3,"file":"index.js","sources":["src/createState.js","src/factoryHelpers.js"],"sourcesContent":["import { combineReducers, createStore, applyMiddleware } from 'redux'\nimport factory from 'k-redux-factory'\n\nconst tree = (root) => {\n  const subtree = (name, path) => {\n    // first run\n    if (name === undefined) {\n      return Object\n        .keys(root)\n        .map(key => ({ [key]: subtree(key, '') }))\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n    }\n\n    // other runs\n    const nextPath = `${path ? `${path}.` : ''}${name}`\n    const fullpath = `root.${nextPath}`\n    const options = eval(fullpath) // eslint-disable-line no-eval\n    const { type } = options\n\n    // - leaf\n    if (type) { // k-redux-factory\n      return factory({ name, path, ...options })\n    } else if (typeof options === 'function') { // custom reducer\n      return options\n    }\n\n    // - branch\n    return Object\n      .keys(options)\n      .map(key => ({ [key]: subtree(key, nextPath) }))\n      .reduce(\n        (acc, next) => ({ ...acc, ...next }),\n        {},\n      )\n  }\n\n  return subtree()\n}\n\nconst combine = (root) => {\n  const subcombine = (current) => {\n    const reducers = Object\n      .keys(current)\n      .map((key) => {\n        const cur = current[key]\n        if (typeof cur === 'function') return ({ [key]: cur })\n        return ({ [key]: subcombine(cur) })\n      })\n      .reduce(\n        (acc, curr) => ({ ...acc, ...curr }),\n        {},\n      )\n\n    return combineReducers(reducers)\n  }\n\n  return subcombine(root)\n}\n\nconst keysConfig = {\n  keyValue: [\n    // actions\n    ['set', 'add', 'update', 'addOrUpdate', 'replace', 'remove', 'orderBy', 'reset'],\n    // selectors\n    ['get', 'getBy', 'getKeys', 'getAsArray', 'getLength', 'isInitialized', 'getState'],\n  ],\n  simpleObject: [\n    // actions\n    ['set', 'update', 'reset'],\n    // selectors\n    ['get', 'isInitialized'],\n  ],\n}\nconst toContext = (root, store) => {\n  const subcontext = (name, path) => {\n    // first run\n    if (name === undefined) {\n      return Object\n        .keys(root)\n        .map(key => ({ [key]: subcontext(key, '') }))\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n    }\n\n    // other runs\n    const nextPath = `${path ? `${path}.` : ''}${name}`\n    const fullpath = `root.${nextPath}`\n    const reducer = eval(fullpath) // eslint-disable-line no-eval\n\n    // - leaf\n    if (reducer.krfType !== undefined) {\n      const keys = keysConfig[reducer.krfType]\n      const [actions, selectors] = keys\n\n      const actionsObject = actions\n        .map((action) => {\n          const legacyAction = reducer[action]\n\n          return {\n            [action]: (...args) => store.dispatch(legacyAction(...args)),\n          }\n        })\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n      const selectorsObject = selectors\n        .map((selector) => {\n          const legacySelector = reducer[selector]\n\n          return {\n            [selector]: (...args) => legacySelector(...args)(store.getState()),\n          }\n        })\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n\n      return Object.assign(reducer, actionsObject, selectorsObject)\n    }\n\n    // - branch\n    return Object\n      .keys(reducer)\n      .map(key => ({ [key]: subcontext(key, nextPath) }))\n      .reduce(\n        (acc, next) => ({ ...acc, ...next }),\n        {},\n      )\n  }\n\n  return subcontext()\n}\n\nconst defaultOptions = {\n  hideRedux: true,\n  middlewares: [],\n  init: {},\n}\nexport default (definition, options) => {\n  // options\n  const innerOptions = { ...defaultOptions, ...options }\n\n  // this is reducer exports (action/selectors)\n  let reducerTree = tree(definition)\n\n  // this is the redux store\n  const store = createStore(\n    combine(reducerTree),\n    innerOptions.init,\n    applyMiddleware(...innerOptions.middlewares),\n  )\n\n  // convert to a contextualized version\n  if (innerOptions.hideRedux) {\n    reducerTree = toContext(reducerTree, store)\n  }\n\n  // exports\n  return {\n    ...reducerTree,\n    getStore: () => store,\n    getState: store.getState,\n    dispatch: store.dispatch,\n  }\n}\n","export const keyValue = params => ({ ...params, type: 'keyValue' })\nexport const simpleObject = params => ({ ...params, type: 'simpleObject' })\n"],"names":["tree","root","subtree","name","path","undefined","Object","keys","map","key","reduce","acc","next","nextPath","fullpath","options","eval","type","factory","combine","subcombine","current","reducers","cur","curr","combineReducers","keysConfig","toContext","store","subcontext","reducer","krfType","actions","selectors","actionsObject","action","legacyAction","dispatch","selectorsObject","selector","legacySelector","getState","assign","defaultOptions","definition","innerOptions","reducerTree","createStore","init","applyMiddleware","middlewares","hideRedux","keyValue","params","simpleObject"],"mappings":"mvCAGMA,KAAO,SAAPA,KAAQC,UACNC,QAAU,SAAVA,QAAWC,KAAMC,cAERC,IAATF,YACKG,OACJC,KAAKN,MACLO,IAAI,qCAAWC,EAAMP,QAAQO,EAAK,OAClCC,OACC,SAACC,EAAKC,sBAAeD,EAAQC,YAM7BC,UAAcT,KAAUA,SAAU,IAAKD,KACvCW,iBAAmBD,SACnBE,QAAUC,KAAKF,UACbG,KAASF,QAATE,YAGJA,KACKC,kBAAUf,UAAMC,WAASW,UACJ,mBAAZA,QACTA,QAIFT,OACJC,KAAKQ,SACLP,IAAI,qCAAWC,EAAMP,QAAQO,EAAKI,aAClCH,OACC,SAACC,EAAKC,sBAAeD,EAAQC,gBAK5BV,WAGHiB,QAAU,SAAClB,UACI,SAAbmB,EAAcC,OACZC,EAAWhB,OACdC,KAAKc,GACLb,IAAI,SAACC,OACEc,EAAMF,EAAQZ,4BACsBA,EAAvB,mBAARc,EAAqCA,EAC/BH,EAAWG,MAE7Bb,OACC,SAACC,EAAKa,sBAAeb,EAAQa,eAI1BC,sBAAgBH,GAGlBF,CAAWnB,IAGdyB,uBAGD,MAAO,MAAO,SAAU,cAAe,UAAW,SAAU,UAAW,UAEvE,MAAO,QAAS,UAAW,aAAc,YAAa,gBAAiB,4BAIvE,MAAO,SAAU,UAEjB,MAAO,mBAGNC,UAAY,SAAZA,UAAa1B,KAAM2B,WACjBC,WAAa,SAAbA,WAAc1B,KAAMC,cAEXC,IAATF,YACKG,OACJC,KAAKN,MACLO,IAAI,qCAAWC,EAAMoB,WAAWpB,EAAK,OACrCC,OACC,SAACC,EAAKC,sBAAeD,EAAQC,YAM7BC,UAAcT,KAAUA,SAAU,IAAKD,KACvCW,iBAAmBD,SACnBiB,QAAUd,KAAKF,kBAGGT,IAApByB,QAAQC,QAAuB,KAC3BxB,KAAOmB,WAAWI,QAAQC,6BACHxB,QAAtByB,iBAASC,mBAEVC,cAAgBF,QACnBxB,IAAI,SAAC2B,OACEC,EAAeN,QAAQK,4BAG1BA,EAAS,kBAAaP,MAAMS,SAASD,+BAGzC1B,OACC,SAACC,EAAKC,sBAAeD,EAAQC,QAG3B0B,gBAAkBL,UACrBzB,IAAI,SAAC+B,OACEC,EAAiBV,QAAQS,4BAG5BA,EAAW,kBAAaC,yBAAAA,CAAwBZ,MAAMa,gBAG1D/B,OACC,SAACC,EAAKC,sBAAeD,EAAQC,eAI1BN,OAAOoC,OAAOZ,QAASI,cAAeI,wBAIxChC,OACJC,KAAKuB,SACLtB,IAAI,qCAAWC,EAAMoB,WAAWpB,EAAKI,aACrCH,OACC,SAACC,EAAKC,sBAAeD,EAAQC,gBAK5BiB,cAGHc,2BACO,+CAIGC,EAAY7B,OAEpB8B,cAAoBF,eAAmB5B,GAGzC+B,EAAc9C,KAAK4C,GAGjBhB,EAAQmB,kBACZ5B,QAAQ2B,GACRD,EAAaG,KACbC,qDAAmBJ,EAAaK,sBAI9BL,EAAaM,cACDxB,UAAUmB,EAAalB,gBAKlCkB,YACO,kBAAMlB,YACNA,EAAMa,kBACNb,EAAMS,YCzKPe,SAAW,+BAAgBC,GAAQpC,KAAM,cACzCqC,aAAe,+BAAgBD,GAAQpC,KAAM"}
=======
{"version":3,"file":"index.js","sources":["src/createStore.js"],"sourcesContent":["import { combineReducers, createStore, applyMiddleware } from 'redux'\nimport factory from 'k-redux-factory'\n\nconst tree = (root) => {\n  const subtree = (name, path) => {\n    // first run\n    if (name === undefined) {\n      return Object\n        .keys(root)\n        .map(key => ({ [key]: subtree(key, '') }))\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n    }\n\n    // other runs\n    const nextPath = `${path ? `${path}.` : ''}${name}`\n    const fullpath = `root.${nextPath}`\n    const options = eval(fullpath) // eslint-disable-line no-eval\n    const { type } = options\n\n    // - leaf\n    if (type) { // k-redux-factory\n      return factory({ name, path, ...options })\n    } else if (typeof options === 'function') { // custom reducer\n      return options\n    }\n\n    // - branch\n    return Object\n      .keys(options)\n      .map(key => ({ [key]: subtree(key, nextPath) }))\n      .reduce(\n        (acc, next) => ({ ...acc, ...next }),\n        {},\n      )\n  }\n\n  return subtree()\n}\n\nconst combine = (root) => {\n  const subcombine = (current) => {\n    const reducers = Object\n      .keys(current)\n      .map((key) => {\n        const cur = current[key]\n        if (typeof cur === 'function') return ({ [key]: cur })\n        return ({ [key]: subcombine(cur) })\n      })\n      .reduce(\n        (acc, curr) => ({ ...acc, ...curr }),\n        {},\n      )\n\n    return combineReducers(reducers)\n  }\n\n  return subcombine(root)\n}\n\nconst keysConfig = {\n  keyValue: [\n    // actions\n    ['set', 'add', 'update', 'addOrUpdate', 'replace', 'remove', 'orderBy', 'reset'],\n    // selectors\n    ['get', 'getBy', 'getKeys', 'getAsArray', 'getLength', 'isInitialized', 'getState'],\n  ],\n  simpleObject: [\n    // actions\n    ['set', 'update', 'reset'],\n    // selectors\n    ['get', 'isInitialized'],\n  ],\n}\nconst toContext = (root, store) => {\n  const subcontext = (name, path) => {\n    // first run\n    if (name === undefined) {\n      return Object\n        .keys(root)\n        .map(key => ({ [key]: subcontext(key, '') }))\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n    }\n\n    // other runs\n    const nextPath = `${path ? `${path}.` : ''}${name}`\n    const fullpath = `root.${nextPath}`\n    const reducer = eval(fullpath) // eslint-disable-line no-eval\n\n    // - leaf\n    if (reducer.krfType !== undefined) {\n      const keys = keysConfig[reducer.krfType]\n      const [actions, selectors] = keys\n\n      const actionsObject = actions\n        .map((action) => {\n          const legacyAction = reducer[action]\n\n          return {\n            [action]: (...args) => store.dispatch(legacyAction(...args)),\n          }\n        })\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n      const selectorsObject = selectors\n        .map((selector) => {\n          const legacySelector = reducer[selector]\n\n          return {\n            [selector]: (...args) => legacySelector(...args)(store.getState()),\n          }\n        })\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n\n      return Object.assign(reducer, actionsObject, selectorsObject)\n    }\n\n    // - branch\n    return Object\n      .keys(reducer)\n      .map(key => ({ [key]: subcontext(key, nextPath) }))\n      .reduce(\n        (acc, next) => ({ ...acc, ...next }),\n        {},\n      )\n  }\n\n  return subcontext()\n}\n\nconst defaultOptions = {\n  hideRedux: true,\n  middlewares: [],\n  init: {},\n}\n\nexport default (definition, options) => {\n  // options\n  const innerOptions = { ...defaultOptions, ...options }\n\n  // this is reducer exports (action/selectors)\n  let reducerTree = tree(definition)\n\n  // this is the redux store\n  const store = createStore(\n    combine(reducerTree),\n    innerOptions.init,\n    applyMiddleware(...innerOptions.middlewares),\n  )\n\n  // convert to a contextualized version\n  if (innerOptions.hideRedux) {\n    reducerTree = toContext(reducerTree, store)\n  }\n\n  // exports\n  return {\n    ...reducerTree,\n    getStore: () => store,\n    getState: store.getState,\n    dispatch: store.dispatch,\n  }\n}\n"],"names":["tree","root","subtree","name","path","undefined","Object","keys","map","key","reduce","acc","next","nextPath","fullpath","options","eval","type","factory","combine","subcombine","current","reducers","cur","curr","combineReducers","keysConfig","toContext","store","subcontext","reducer","krfType","actions","selectors","actionsObject","action","legacyAction","dispatch","selectorsObject","selector","legacySelector","getState","assign","defaultOptions","definition","innerOptions","reducerTree","createStore","init","applyMiddleware","middlewares","hideRedux"],"mappings":"mvCAGMA,KAAO,SAAPA,KAAQC,UACNC,QAAU,SAAVA,QAAWC,KAAMC,cAERC,IAATF,YACKG,OACJC,KAAKN,MACLO,IAAI,qCAAWC,EAAMP,QAAQO,EAAK,OAClCC,OACC,SAACC,EAAKC,sBAAeD,EAAQC,YAM7BC,UAAcT,KAAUA,SAAU,IAAKD,KACvCW,iBAAmBD,SACnBE,QAAUC,KAAKF,UACbG,KAASF,QAATE,YAGJA,KACKC,kBAAUf,UAAMC,WAASW,UACJ,mBAAZA,QACTA,QAIFT,OACJC,KAAKQ,SACLP,IAAI,qCAAWC,EAAMP,QAAQO,EAAKI,aAClCH,OACC,SAACC,EAAKC,sBAAeD,EAAQC,gBAK5BV,WAGHiB,QAAU,SAAClB,UACI,SAAbmB,EAAcC,OACZC,EAAWhB,OACdC,KAAKc,GACLb,IAAI,SAACC,OACEc,EAAMF,EAAQZ,4BACsBA,EAAvB,mBAARc,EAAqCA,EAC/BH,EAAWG,MAE7Bb,OACC,SAACC,EAAKa,sBAAeb,EAAQa,eAI1BC,sBAAgBH,GAGlBF,CAAWnB,IAGdyB,uBAGD,MAAO,MAAO,SAAU,cAAe,UAAW,SAAU,UAAW,UAEvE,MAAO,QAAS,UAAW,aAAc,YAAa,gBAAiB,4BAIvE,MAAO,SAAU,UAEjB,MAAO,mBAGNC,UAAY,SAAZA,UAAa1B,KAAM2B,WACjBC,WAAa,SAAbA,WAAc1B,KAAMC,cAEXC,IAATF,YACKG,OACJC,KAAKN,MACLO,IAAI,qCAAWC,EAAMoB,WAAWpB,EAAK,OACrCC,OACC,SAACC,EAAKC,sBAAeD,EAAQC,YAM7BC,UAAcT,KAAUA,SAAU,IAAKD,KACvCW,iBAAmBD,SACnBiB,QAAUd,KAAKF,kBAGGT,IAApByB,QAAQC,QAAuB,KAC3BxB,KAAOmB,WAAWI,QAAQC,6BACHxB,QAAtByB,iBAASC,mBAEVC,cAAgBF,QACnBxB,IAAI,SAAC2B,OACEC,EAAeN,QAAQK,4BAG1BA,EAAS,kBAAaP,MAAMS,SAASD,+BAGzC1B,OACC,SAACC,EAAKC,sBAAeD,EAAQC,QAG3B0B,gBAAkBL,UACrBzB,IAAI,SAAC+B,OACEC,EAAiBV,QAAQS,4BAG5BA,EAAW,kBAAaC,yBAAAA,CAAwBZ,MAAMa,gBAG1D/B,OACC,SAACC,EAAKC,sBAAeD,EAAQC,eAI1BN,OAAOoC,OAAOZ,QAASI,cAAeI,wBAIxChC,OACJC,KAAKuB,SACLtB,IAAI,qCAAWC,EAAMoB,WAAWpB,EAAKI,aACrCH,OACC,SAACC,EAAKC,sBAAeD,EAAQC,gBAK5BiB,cAGHc,2BACO,iDAKGC,EAAY7B,OAEpB8B,cAAoBF,eAAmB5B,GAGzC+B,EAAc9C,KAAK4C,GAGjBhB,EAAQmB,kBACZ5B,QAAQ2B,GACRD,EAAaG,KACbC,qDAAmBJ,EAAaK,sBAI9BL,EAAaM,cACDxB,UAAUmB,EAAalB,gBAKlCkB,YACO,kBAAMlB,YACNA,EAAMa,kBACNb,EAAMS"}
>>>>>>> master
