{"version":3,"file":"index.js","sources":["src/createStore/reduxFactory.js","src/createStore/toContext.js","src/createStore/combine.js","src/createStore/listenFactory.js","src/createStore/createStore.js","src/factoryHelpers.js","src/take.js"],"sourcesContent":["import factory from 'k-redux-factory'\n\nexport default (root) => {\n  const subtree = (name, path) => {\n    // first run\n    if (name === undefined) {\n      return Object\n        .keys(root)\n        .map(key => ({ [key]: subtree(key, '') }))\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n    }\n\n    // other runs\n    const nextPath = `${path ? `${path}.` : ''}${name}`\n    const fullpath = `root.${nextPath}`\n    const options = eval(fullpath) // eslint-disable-line no-eval\n    const { type } = options\n\n    // - leaf\n    if (type) { // k-redux-factory\n      return factory({ name, path, ...options })\n    } else if (typeof options === 'function') { // custom reducer\n      return options\n    }\n\n    // - branch\n    return Object\n      .keys(options)\n      .map(key => ({ [key]: subtree(key, nextPath) }))\n      .reduce(\n        (acc, next) => ({ ...acc, ...next }),\n        {},\n      )\n  }\n\n  return subtree()\n}\n","const withParams = ['get', 'getBy']\n\nconst keysConfig = {\n  keyValue: [\n    // actions\n    ['set', 'add', 'update', 'addOrUpdate', 'replace', 'remove', 'orderBy', 'reset'],\n    // selectors\n    ['get', 'getBy', 'getKeys', 'getAsArray', 'getLength', 'isInitialized', 'getState'],\n  ],\n  simpleObject: [\n    // actions\n    ['set', 'update', 'reset'],\n    // selectors\n    ['get', 'isInitialized'],\n  ],\n}\n\nexport default (root, store) => {\n  const subcontext = (name, path) => {\n    // first run\n    if (name === undefined) {\n      return Object\n        .keys(root)\n        .map(key => ({ [key]: subcontext(key, '') }))\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n    }\n\n    // other runs\n    const nextPath = `${path ? `${path}.` : ''}${name}`\n    const fullpath = `root.${nextPath}`\n    const reducer = eval(fullpath) // eslint-disable-line no-eval\n\n    // - leaf\n    if (reducer.krfType !== undefined) {\n      const keys = keysConfig[reducer.krfType]\n      const [actions, selectors] = keys\n\n      const actionsObject = actions\n        .map((action) => {\n          const legacyAction = reducer[action]\n\n          return {\n            [action]: (...args) => store.dispatch(legacyAction(...args)),\n          }\n        })\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n      const selectorsObject = selectors\n        .map((selector) => {\n          const legacySelector = reducer[selector]\n\n          return {\n            [selector]: (...args) => {\n              if (withParams.includes(selector)) return legacySelector(...args)(store.getState())\n              return legacySelector(store.getState())\n            },\n          }\n        })\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n\n      return Object.assign(reducer, actionsObject, selectorsObject)\n    }\n\n    // - branch\n    return Object\n      .keys(reducer)\n      .map(key => ({ [key]: subcontext(key, nextPath) }))\n      .reduce(\n        (acc, next) => ({ ...acc, ...next }),\n        {},\n      )\n  }\n\n  return subcontext()\n}\n","import { combineReducers } from 'redux'\n\nexport default (root) => {\n  const subcombine = (current) => {\n    const reducers = Object\n      .keys(current)\n      .map((key) => {\n        const cur = current[key]\n        if (typeof cur === 'function') return ({ [key]: cur })\n        return ({ [key]: subcombine(cur) })\n      })\n      .reduce(\n        (acc, curr) => ({ ...acc, ...curr }),\n        {},\n      )\n\n    return combineReducers(reducers)\n  }\n\n  return subcombine(root)\n}\n","export default (listeners) => {\n  // k-simple-state store\n  let innerStore\n\n  return {\n    // this setter is needded since the middleware is pass to redux\n    // createStore, and then BEFORE, we have store instanciated\n    setStore: (store) => { innerStore = store },\n\n    // redux middleware\n    middleware: () => next => (action) => {\n      // dispatch action\n      const res = next(action)\n\n      // trigger listeners\n      listeners.forEach((listener) => { listener(action, innerStore) })\n\n      // return action result\n      return res\n    },\n  }\n}\n","import { createStore, compose, applyMiddleware } from 'redux'\nimport reduxFactory from './reduxFactory'\nimport toContext from './toContext'\nimport combine from './combine'\nimport listenFactory from './listenFactory'\n\nconst getListen = (options) => {\n  const { listeners, enhancer } = options\n\n  if (listeners) {\n    const listen = listenFactory(listeners)\n\n    // add this middleware to enhancer\n    const middleware = applyMiddleware(listen.middleware)\n    if (enhancer) return { enhancer: compose(enhancer, middleware), listen }\n\n    return { enhancer: middleware, listen }\n  }\n\n  return { enhancer }\n}\n\nconst defaultOptions = {\n  hideRedux: true,\n  enhancer: undefined,\n  init: {},\n  listeners: undefined,\n}\n\nexport default (definition, options = defaultOptions) => {\n  // options\n  const innerOptions = { ...defaultOptions, ...options }\n  const { init, hideRedux } = innerOptions\n\n  // this is reducer exports (action/selectors)\n  let reducerTree = reduxFactory(definition)\n\n  // instanciate the listen middleware\n  const { enhancer, listen } = getListen(innerOptions)\n\n  // this is the redux store\n  const reduxStore = createStore(\n    combine(reducerTree),\n    init,\n    enhancer,\n  )\n\n  // convert to a contextualized version\n  if (hideRedux) {\n    reducerTree = toContext(reducerTree, reduxStore)\n  }\n\n  // exported store (our own)\n  const store = {\n    ...reducerTree,\n    ...reduxStore,\n    getStore: () => reduxStore,\n  }\n\n  // pass store to listen (after it has be created)\n  if (listen) listen.setStore(store)\n\n  return store\n}\n","export const keyValue = params => ({ ...params, type: 'keyValue' })\nexport const simpleObject = params => ({ ...params, type: 'simpleObject' })\n","import { isRegExp, isString, isFunction } from 'lodash'\n\nconst take = (match, callback) => (action, store) => {\n  const isMatching = ( // test matching\n    // to a string\n    (\n      isString(match) &&\n      action.type === match\n    )\n    // to a function\n    || (\n      isFunction(match) &&\n      match(action, store)\n    )\n    // to a regexp\n    || (\n      isRegExp(match) &&\n      action.type.match(match)\n    )\n  )\n\n  if (isMatching) return callback(action, store)\n  return false\n}\n\nexport default take\n"],"names":["root","subtree","name","path","undefined","Object","keys","map","key","reduce","acc","next","nextPath","fullpath","options","eval","type","factory","withParams","keysConfig","store","subcontext","reducer","krfType","actions","selectors","actionsObject","action","legacyAction","dispatch","selectorsObject","selector","legacySelector","includes","getState","assign","subcombine","current","reducers","cur","curr","combineReducers","listeners","innerStore","res","forEach","listener","getListen","enhancer","listen","listenFactory","middleware","applyMiddleware","compose","defaultOptions","definition","innerOptions","init","hideRedux","reducerTree","reduxFactory","reduxStore","createStore","combine","toContext","setStore","keyValue","params","simpleObject","take","match","callback","isRegExp"],"mappings":"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"}