{"version":3,"file":"react.js","sources":["src/react/getWrappedDisplayName.js","src/react/inject.jsx","src/react/provider.jsx"],"sourcesContent":["export default Component => (\n  Component.displayName\n  || Component.name\n  || (Component.constructor && Component.constructor.name)\n  || 'Unknown'\n)\n","import React, { Component } from 'react'\nimport shallowEqual from 'fbjs/lib/shallowEqual'\nimport getWrappedDisplayName from './getWrappedDisplayName'\n\nexport default injectFunction => WrappedComponent => class extends Component {\n  static displayName = `inject(${getWrappedDisplayName(WrappedComponent)}`\n\n  static contextTypes = {\n    kStore: () => null, // this is to avoid importing prop-types\n  }\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state = {\n      injectedProps: {},\n    }\n  }\n\n  componentWillMount() {\n    // subscribe\n    this.unsubscribe = this.context.kStore.subscribe(() => {\n      this.inject()\n    })\n\n    // run in once\n    this.inject()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.readStore(nextProps)()\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  inject = () => {\n    const { injectedProps } = this.state\n    const newInjectedProps = injectFunction(this.context.kStore, this.props)\n\n    if (shallowEqual(injectedProps, newInjectedProps)) return\n\n    this.setState(state => ({\n      ...state,\n      injectedProps: newInjectedProps,\n    }))\n  }\n\n  render() {\n    return (\n      <WrappedComponent\n        /* this is parent props */\n        {...this.props}\n        /* this is injected props from hoc */\n        {...this.state.injectedProps}\n      />\n    )\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nimport React, { Component } from 'react'\nimport getWrappedDisplayName from './getWrappedDisplayName'\n\nexport default store => WrappedComponent => class extends Component {\n  static displayName = `provider(${getWrappedDisplayName(WrappedComponent)})`\n\n  static childContextTypes = {\n    kStore: () => null, // this is to avoid importing prop-types\n  }\n\n  getChildContext() {\n    return { kStore: store }\n  }\n\n  render() {\n    return <WrappedComponent {...this.props} />\n  }\n}\n"],"names":["Component","displayName","name","constructor","props","context","inject","injectedProps","_this","state","newInjectedProps","injectFunction","kStore","shallowEqual","setState","unsubscribe","this","subscribe","nextProps","readStore","React","WrappedComponent","getWrappedDisplayName","contextTypes","store","childContextTypes"],"mappings":"oYAAA,yBACEA,EAAUC,aACPD,EAAUE,MACTF,EAAUG,aAAeH,EAAUG,YAAYD,MAChD,+/BCA4B,sDAOnBE,EAAOC,4EACXD,EAAOC,aAyBfC,OAAS,eACCC,EAAkBC,EAAKC,MAAvBF,cACFG,EAAmBC,EAAeH,EAAKH,QAAQO,OAAQJ,EAAKJ,OAE9DS,EAAaN,EAAeG,MAE3BI,SAAS,wBACTL,iBACYC,SA/BZD,yGAOAM,YAAcC,KAAKX,QAAQO,OAAOK,UAAU,aAC1CX,gBAIFA,2DAGmBY,QACnBC,UAAUD,yDAIVH,sDAiBHK,gBAACC,OAEKL,KAAKZ,MAELY,KAAKP,MAAMF,uBAnD4CP,eAC1DC,sBAAwBqB,EAAsBD,KAE9CE,qBACG,kBAAM,yCCJM,iNAQXX,OAAQY,2CAIVJ,gBAACC,EAAqBL,KAAKZ,cAZoBJ,eACjDC,wBAA0BqB,EAAsBD,SAEhDI,0BACG,kBAAM"}