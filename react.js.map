{"version":3,"file":"react.js","sources":["src/react/getWrappedDisplayName.js","src/react/inject.jsx","src/react/provider.jsx"],"sourcesContent":["export default Component => (\n  Component.displayName\n  || Component.name\n  || (Component.constructor && Component.constructor.name)\n  || 'Unknown'\n)\n","import React, { Component } from 'react'\nimport shallowEqual from 'fbjs/lib/shallowEqual'\nimport getWrappedDisplayName from './getWrappedDisplayName'\n\nconst defaultObject = {}\nconst withoutFunctions = object => Object\n  .keys(object)\n  .reduce((acc, key) => {\n    const value = object[key]\n    if (typeof value === 'function') return acc\n    return { ...acc, [key]: value }\n  }, defaultObject)\n\n\nexport default injectFunction => WrappedComponent => class extends Component {\n  static displayName = `inject(${getWrappedDisplayName(WrappedComponent)}`\n\n  static contextTypes = {\n    store: () => null, // this is to avoid importing prop-types\n  }\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state = {\n      injectedProps: {},\n    }\n  }\n\n  componentWillMount() {\n    // subscribe\n    this.unsubscribe = this.context.store.subscribe(() => {\n      this.inject()\n    })\n\n    // run in once\n    this.inject()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.inject(nextProps)\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  inject = (nextProps) => {\n    const { injectedProps } = this.state\n    const newInjectedProps = injectFunction(this.context.store, nextProps || this.props)\n\n    if (\n      (nextProps === undefined || shallowEqual(this.props, nextProps))\n      && shallowEqual(\n        withoutFunctions(injectedProps),\n        withoutFunctions(newInjectedProps),\n      )\n    ) { return }\n\n    this.setState(state => ({\n      ...state,\n      injectedProps: newInjectedProps,\n    }))\n  }\n\n  render() {\n    return (\n      <WrappedComponent\n        /* this is parent props */\n        {...this.props}\n        /* this is injected props from hoc */\n        {...this.state.injectedProps}\n      />\n    )\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nimport React, { Component } from 'react'\nimport getWrappedDisplayName from './getWrappedDisplayName'\n\nexport default store => WrappedComponent => class extends Component {\n  static displayName = `provider(${getWrappedDisplayName(WrappedComponent)})`\n\n  static childContextTypes = {\n    store: () => null, // this is to avoid importing prop-types\n  }\n\n  getChildContext() {\n    return { store }\n  }\n\n  render() {\n    return <WrappedComponent {...this.props} />\n  }\n}\n"],"names":["Component","displayName","name","constructor","defaultObject","withoutFunctions","Object","keys","object","reduce","acc","key","value","props","context","inject","nextProps","injectedProps","_this","state","newInjectedProps","injectFunction","store","undefined","shallowEqual","setState","unsubscribe","this","subscribe","React","WrappedComponent","getWrappedDisplayName","contextTypes","childContextTypes"],"mappings":"oYAAA,yBACEA,EAAUC,aACPD,EAAUE,MACTF,EAAUG,aAAeH,EAAUG,YAAYD,MAChD,m+BCACE,KACAC,EAAmB,mBAAUC,OAChCC,KAAKC,GACLC,OAAO,SAACC,EAAKC,aACNC,EAAQJ,EAAOG,SACA,mBAAVC,EAA6BF,OAC5BA,KAAYE,KAAND,sGACjBP,gCAG4B,sDAOnBS,EAAOC,4EACXD,EAAOC,aAyBfC,OAAS,SAACC,OACAC,EAAkBC,EAAKC,MAAvBF,cACFG,EAAmBC,EAAeH,EAAKJ,QAAQQ,MAAON,GAAaE,EAAKL,aAG7DU,IAAdP,GAA2BQ,EAAaN,EAAKL,MAAOG,KAClDQ,EACDnB,EAAiBY,GACjBZ,EAAiBe,OAIhBK,SAAS,wBACTN,iBACYC,SArCZD,yGAOAO,YAAcC,KAAKb,QAAQQ,MAAMM,UAAU,aACzCb,gBAIFA,2DAGmBC,QACnBD,OAAOC,uDAIPU,sDAuBHG,gBAACC,OAEKH,KAAKd,MAELc,KAAKR,MAAMF,uBAzD4CjB,eAC1DC,sBAAwB8B,EAAsBD,KAE9CE,oBACE,kBAAM,yCCdO,iNAQXV,iDAIFO,gBAACC,EAAqBH,KAAKd,cAZoBb,eACjDC,wBAA0B8B,EAAsBD,SAEhDG,yBACE,kBAAM"}