{"version":3,"file":"index.umd.js","sources":["../src/reduxLittleRouter.js"],"sourcesContent":["import { routerForBrowser, push, replace, go, goBack, goForward, block, unblock, initializeCurrentLocation } from 'redux-little-router'\nimport { compose, applyMiddleware } from 'redux'\n\nconst getParentResultParam = (result, key) => {\n  if (!result) return undefined\n  if (result[key]) return result[key]\n  return getParentResultParam(result.parent, key)\n}\n\nconst isParentResultParam = (result, key, value) => {\n  if (!result) return false\n  if (result[key] === value) return true\n  return isParentResultParam(result.parent, key, value)\n}\n\nconst isRouterImpl = ({ reducer, middleware, enhancer }) => reducer && enhancer && middleware\n\nconst getDriver = selector => ({ dispatch, getState }) => {\n  const get = () => selector(getState())\n  const getResult = () => get().result\n\n  return ({\n    /* actions */\n    push: path => dispatch(push(path)),\n    replace: path => dispatch(replace(path)),\n    go: nbLocations => dispatch(go(nbLocations)),\n    goBack: () => dispatch(goBack()),\n    goForward: () => dispatch(goForward()),\n    block: callback => dispatch(block(callback)),\n    unblock: () => dispatch(unblock()),\n    /* route selectors */\n    get,\n    getRouteParam: key => get().params && get().params[key],\n    getQueryParam: key => get().query && get().query[key],\n    getResultParam: key => getResult() && getResult()[key],\n    getParentResultParam: key => getParentResultParam(getResult(), key),\n    isRoute: route => get().route === route,\n    isParentResultParam: (key, value) => isParentResultParam(getResult(), key, value),\n  })\n}\n\nconst init = selector => ({ getState, dispatch }) => {\n  const initialLocation = selector(getState())\n  if (initialLocation) dispatch(initializeCurrentLocation(initialLocation))\n}\n\nexport default (config, selector) => {\n  const {\n    reducer,\n    middleware,\n    enhancer,\n  } = isRouterImpl(config) ? config : routerForBrowser({ routes: config })\n\n  return {\n    getDriver: getDriver(selector),\n    getReducer: () => ({ reducer, path: 'router' }), // FIXME: hardcoded router\n    getEnhancer: () => compose(enhancer, applyMiddleware(middleware)),\n    init: init(selector),\n  }\n}\n"],"names":["config","selector","reducer","middleware","enhancer","isRouterImpl","routerForBrowser","routes","dispatch","getState","get","getResult","result","push","path","replace","go","nbLocations","goBack","goForward","block","callback","unblock","params","key","query","getParentResultParam","parent","route","value","isParentResultParam","getDriver","compose","applyMiddleware","initialLocation","initializeCurrentLocation","init"],"mappings":"oVA8CgBA,EAAQC,SA/BH,gBAAGC,IAAAA,QAASC,IAAAA,WAAYC,IAAAA,gBAAeF,GAAWE,GAAYD,EAoC7EE,CAAaL,GAAUA,EAASM,oBAAmBC,OAAQP,IAH7DE,IAAAA,QACAC,IAAAA,WACAC,IAAAA,0BAjCc,mBAAY,gBAAGI,IAAAA,SAAUC,IAAAA,SACnCC,EAAM,kBAAMT,EAASQ,MACrBE,EAAY,kBAAMD,IAAME,oBAItB,mBAAQJ,EAASK,OAAKC,aACnB,mBAAQN,EAASO,UAAQD,QAC9B,mBAAeN,EAASQ,KAAGC,YACvB,kBAAMT,EAASU,uBACZ,kBAAMV,EAASW,sBACnB,mBAAYX,EAASY,QAAMC,aACzB,kBAAMb,EAASc,kCAGT,mBAAOZ,IAAMa,QAAUb,IAAMa,OAAOC,kBACpC,mBAAOd,IAAMe,OAASf,IAAMe,MAAMD,mBACjC,mBAAOb,KAAeA,IAAYa,yBAC5B,mBAhCG,SAAvBE,EAAwBd,EAAQY,MAC/BZ,SACDA,EAAOY,GAAaZ,EAAOY,GACxBE,EAAqBd,EAAOe,OAAQH,GA6BZE,CAAqBf,IAAaa,YACtD,mBAASd,IAAMkB,QAAUA,uBACb,SAACJ,EAAKK,UA5BH,SAAtBC,EAAuBlB,EAAQY,EAAKK,WACnCjB,IACDA,EAAOY,KAASK,GACbC,EAAoBlB,EAAOe,OAAQH,EAAKK,IAyBRC,CAAoBnB,IAAaa,EAAKK,MAiBhEE,CAAU9B,cACT,kBAASC,UAASY,KAAM,uBACvB,kBAAMkB,UAAQ5B,EAAU6B,kBAAgB9B,UAf5C,mBAAY,gBAAGM,IAAAA,SAAUD,IAAAA,SAC9B0B,EAAkBjC,EAASQ,KAC7ByB,GAAiB1B,EAAS2B,4BAA0BD,KAchDE,CAAKnC"}