{"version":3,"file":"index.umd.js","sources":["../src/reduxLittleRouter.js"],"sourcesContent":["import { routerForBrowser, push, replace, go, goBack, goForward, block, unblock, initializeCurrentLocation } from 'redux-little-router'\nimport { compose, applyMiddleware } from 'redux'\n\nconst getParentResultParam = (result, key) => {\n  if (!result) return undefined\n  if (result[key]) return result[key]\n  return getParentResultParam(result.parent, key)\n}\n\nconst isParentResultParam = (result, key, value) => {\n  if (!result) return false\n  if (result[key] === value) return true\n  return isParentResultParam(result.parent, key, value)\n}\n\nconst isRouterImpl = ({ reducer, middleware, enhancer }) => reducer && enhancer && middleware\n\nconst getDriver = selector => ({ dispatch, getState }) => {\n  const get = () => selector(getState())\n  const getResult = () => get().result\n\n  return ({\n    /* actions */\n    push: path => dispatch(push(path)),\n    replace: path => dispatch(replace(path)),\n    go: nbLocations => dispatch(go(nbLocations)),\n    goBack: () => dispatch(goBack()),\n    goForward: () => dispatch(goForward()),\n    block: callback => dispatch(block(callback)),\n    unblock: () => dispatch(unblock()),\n    /* route selectors */\n    get,\n    getRouteParam: key => get().params && get().params[key],\n    getQueryParam: key => get().query && get().query[key],\n    getResultParam: key => getResult() && getResult()[key],\n    getParentResultParam: key => getParentResultParam(getResult(), key),\n    isRoute: route => get().route === route,\n    isParentResultParam: (key, value) => isParentResultParam(getResult(), key, value),\n  })\n}\n\nconst init = selector => ({ getState, dispatch }) => {\n  const initialLocation = selector(getState())\n  if (initialLocation) dispatch(initializeCurrentLocation(initialLocation))\n}\n\nexport default (config, selector = state => state.router, path = 'router') => {\n  const {\n    reducer,\n    middleware,\n    enhancer,\n  } = isRouterImpl(config) ? config : routerForBrowser({ routes: config })\n\n  return {\n    getDriver: getDriver(selector),\n    getReducer: () => ({ reducer, path }),\n    getEnhancer: () => compose(enhancer, applyMiddleware(middleware)),\n    init: init(selector),\n  }\n}\n"],"names":["config","selector","state","router","path","reducer","middleware","enhancer","isRouterImpl","routerForBrowser","routes","dispatch","getState","get","getResult","result","push","replace","go","nbLocations","goBack","goForward","block","callback","unblock","params","key","query","getParentResultParam","parent","route","value","isParentResultParam","getDriver","compose","applyMiddleware","initialLocation","initializeCurrentLocation","init"],"mappings":"oVA8CgBA,OAAQC,yDAAW,mBAASC,EAAMC,QAAQC,yDAAO,WA/B5C,gBAAGC,IAAAA,QAASC,IAAAA,WAAYC,IAAAA,gBAAeF,GAAWE,GAAYD,EAoC7EE,CAAaR,GAAUA,EAASS,oBAAmBC,OAAQV,IAH7DK,IAAAA,QACAC,IAAAA,WACAC,IAAAA,0BAjCc,mBAAY,gBAAGI,IAAAA,SAAUC,IAAAA,SACnCC,EAAM,kBAAMZ,EAASW,MACrBE,EAAY,kBAAMD,IAAME,oBAItB,mBAAQJ,EAASK,OAAKZ,aACnB,mBAAQO,EAASM,UAAQb,QAC9B,mBAAeO,EAASO,KAAGC,YACvB,kBAAMR,EAASS,uBACZ,kBAAMT,EAASU,sBACnB,mBAAYV,EAASW,QAAMC,aACzB,kBAAMZ,EAASa,kCAGT,mBAAOX,IAAMY,QAAUZ,IAAMY,OAAOC,kBACpC,mBAAOb,IAAMc,OAASd,IAAMc,MAAMD,mBACjC,mBAAOZ,KAAeA,IAAYY,yBAC5B,mBAhCG,SAAvBE,EAAwBb,EAAQW,MAC/BX,SACDA,EAAOW,GAAaX,EAAOW,GACxBE,EAAqBb,EAAOc,OAAQH,GA6BZE,CAAqBd,IAAaY,YACtD,mBAASb,IAAMiB,QAAUA,uBACb,SAACJ,EAAKK,UA5BH,SAAtBC,EAAuBjB,EAAQW,EAAKK,WACnChB,IACDA,EAAOW,KAASK,GACbC,EAAoBjB,EAAOc,OAAQH,EAAKK,IAyBRC,CAAoBlB,IAAaY,EAAKK,MAiBhEE,CAAUhC,cACT,kBAASI,UAASD,qBACjB,kBAAM8B,UAAQ3B,EAAU4B,kBAAgB7B,UAf5C,mBAAY,gBAAGM,IAAAA,SAAUD,IAAAA,SAC9ByB,EAAkBnC,EAASW,KAC7BwB,GAAiBzB,EAAS0B,4BAA0BD,KAchDE,CAAKrC"}