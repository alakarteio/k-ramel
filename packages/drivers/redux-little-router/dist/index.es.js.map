{"version":3,"file":"index.es.js","sources":["../src/reduxLittleRouter.js"],"sourcesContent":["import { routerForBrowser, push, replace, go, goBack, goForward, block, unblock, initializeCurrentLocation } from 'redux-little-router'\nimport { compose, applyMiddleware } from 'redux'\n\nconst getParentResultParam = (result, key) => {\n  if (!result) return undefined\n  if (result[key]) return result[key]\n  return getParentResultParam(result.parent, key)\n}\n\nconst isParentResultParam = (result, key, value) => {\n  if (!result) return false\n  if (result[key] === value) return true\n  return isParentResultParam(result.parent, key, value)\n}\n\nconst isRouterImpl = ({ reducer, middleware, enhancer }) => reducer && enhancer && middleware\n\nconst getDriver = selector => ({ dispatch, getState }) => {\n  const get = () => selector(getState())\n  const getResult = () => get().result\n\n  return ({\n    /* actions */\n    push: path => dispatch(push(path)),\n    replace: path => dispatch(replace(path)),\n    go: nbLocations => dispatch(go(nbLocations)),\n    goBack: () => dispatch(goBack()),\n    goForward: () => dispatch(goForward()),\n    block: callback => dispatch(block(callback)),\n    unblock: () => dispatch(unblock()),\n    /* route selectors */\n    get,\n    getRouteParam: key => get().params && get().params[key],\n    getQueryParam: key => get().query && get().query[key],\n    getResultParam: key => getResult() && getResult()[key],\n    getParentResultParam: key => getParentResultParam(getResult(), key),\n    isRoute: route => get().route === route,\n    isParentResultParam: (key, value) => isParentResultParam(getResult(), key, value),\n  })\n}\n\nconst init = selector => ({ getState, dispatch }) => {\n  const initialLocation = selector(getState())\n  if (initialLocation) dispatch(initializeCurrentLocation(initialLocation))\n}\n\nexport default (config, selector) => {\n  const {\n    reducer,\n    middleware,\n    enhancer,\n  } = isRouterImpl(config) ? config : routerForBrowser({ routes: config })\n\n  return {\n    getDriver: getDriver(selector),\n    getReducer: () => ({ reducer, path: 'router' }), // FIXME: hardcoded router\n    getEnhancer: () => compose(enhancer, applyMiddleware(middleware)),\n    init: init(selector),\n  }\n}\n"],"names":["getParentResultParam","result","key","parent","isParentResultParam","value","isRouterImpl","reducer","middleware","enhancer","getDriver","dispatch","getState","get","selector","getResult","push","path","replace","go","nbLocations","goBack","goForward","block","callback","unblock","params","query","route","init","initialLocation","initializeCurrentLocation","config","routerForBrowser","routes","compose","applyMiddleware"],"mappings":"sKAGA,IAAMA,sBAAuB,SAAvBA,EAAwBC,EAAQC,MAC/BD,SACDA,EAAOC,GAAaD,EAAOC,GACxBF,EAAqBC,EAAOE,OAAQD,IAGvCE,qBAAsB,SAAtBA,EAAuBH,EAAQC,EAAKG,WACnCJ,IACDA,EAAOC,KAASG,GACbD,EAAoBH,EAAOE,OAAQD,EAAKG,KAG3CC,aAAe,gBAAGC,IAAAA,QAASC,IAAAA,WAAYC,IAAAA,gBAAeF,GAAWE,GAAYD,GAE7EE,UAAY,mBAAY,gBAAGC,IAAAA,SAAUC,IAAAA,SACnCC,EAAM,kBAAMC,EAASF,MACrBG,EAAY,kBAAMF,IAAMZ,oBAItB,mBAAQU,EAASK,KAAKC,aACnB,mBAAQN,EAASO,QAAQD,QAC9B,mBAAeN,EAASQ,GAAGC,YACvB,kBAAMT,EAASU,qBACZ,kBAAMV,EAASW,oBACnB,mBAAYX,EAASY,MAAMC,aACzB,kBAAMb,EAASc,gCAGT,mBAAOZ,IAAMa,QAAUb,IAAMa,OAAOxB,kBACpC,mBAAOW,IAAMc,OAASd,IAAMc,MAAMzB,mBACjC,mBAAOa,KAAeA,IAAYb,yBAC5B,mBAAOF,sBAAqBe,IAAab,YACtD,mBAASW,IAAMe,QAAUA,uBACb,SAAC1B,EAAKG,UAAUD,qBAAoBW,IAAab,EAAKG,OAIzEwB,KAAO,mBAAY,gBAAGjB,IAAAA,SAAUD,IAAAA,SAC9BmB,EAAkBhB,EAASF,KAC7BkB,GAAiBnB,EAASoB,0BAA0BD,iCAG1CE,EAAQlB,SAKlBR,aAAa0B,GAAUA,EAASC,kBAAmBC,OAAQF,IAH7DzB,IAAAA,QACAC,IAAAA,WACAC,IAAAA,0BAIWC,UAAUI,cACT,kBAASP,UAASU,KAAM,uBACvB,kBAAMkB,QAAQ1B,EAAU2B,gBAAgB5B,UAC/CqB,KAAKf"}