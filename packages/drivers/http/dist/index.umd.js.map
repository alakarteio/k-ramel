{"version":3,"file":"index.umd.js","sources":["../src/http.js"],"sourcesContent":["const dispatchFactory = store => name => method =>\n  (event, payload, status, fetch) => store.dispatch({\n    type: `@@http/${name}>${method}>${event}`,\n    payload,\n    status,\n    fetch,\n  })\n\nconst getDriver = (store) => {\n  const innerHeaders = {}\n  let innerOptions = {}\n\n  const driver = (name) => {\n    const ownFetch = async (url, options = {}, ...args) => {\n      // options\n      const { method = 'GET' } = options\n      const appliedHeaders = { ...innerOptions.headers, ...innerHeaders, ...options.headers }\n      const appliedOptions = { ...innerOptions, ...options, headers: appliedHeaders }\n\n      // dispatcher\n      const dispatch = dispatchFactory(store)(name)(method)\n\n      // request\n      let data\n      let raw\n      const fetchArgs = [url, appliedOptions, ...args]\n      dispatch('STARTED', undefined, undefined, fetchArgs)\n      try {\n        raw = await (global || window).fetch(...fetchArgs)\n        data = raw\n\n        if (raw.headers && raw.headers.get('Content-Type') && raw.headers.get('Content-Type').includes('json')) {\n          data = await raw.json()\n        }\n      } catch (ex) {\n        dispatch('FAILED', ex, (raw || {}).status, fetchArgs)\n        return ex\n      }\n\n      const { status } = raw\n      if (status >= 400 || status < 200) {\n        dispatch('FAILED', data, status)\n      } else {\n        dispatch('ENDED', data, status)\n      }\n\n      return data\n    }\n\n    // methods helpers\n    ['GET', 'POST', 'HEAD', 'PUT', 'DELETE', 'OPTIONS', 'CONNECT']\n      .forEach((method) => {\n        ownFetch[method.toLowerCase()] = (url, data, options = {}) => {\n          const headers = { ...options.headers }\n          let appliedOptions = options\n\n          if (data && ['object', 'array'].includes(typeof data)) {\n            // attach data as JSON object\n            let body = data\n            if (!(data instanceof FormData)) {\n              headers['Content-Type'] = headers['Content-Type'] || 'application/json'\n              body = JSON.stringify(data)\n            }\n            appliedOptions = { ...appliedOptions, body }\n          }\n\n          // set fetch arguments\n          appliedOptions = { ...appliedOptions, method, headers }\n\n          return ownFetch(url, appliedOptions)\n        }\n      })\n\n    return ownFetch\n  }\n\n  // custom helpers\n  driver.setAuthorization = (authorization) => { innerHeaders.Authorization = authorization }\n  driver.setOptions = (options) => { innerOptions = options }\n  driver.setCredentials = (credentials) => { innerOptions = { ...innerOptions, credentials } }\n\n  return driver\n}\n\nexport default () => ({\n  getDriver,\n})\n"],"names":["dispatchFactory","event","payload","status","fetch","store","dispatch","name","method","getDriver","innerHeaders","innerOptions","driver","ownFetch","url","args","options","headers","appliedHeaders","appliedOptions","undefined","fetchArgs","global","window","raw","get","includes","json","data","forEach","toLowerCase","body","FormData","JSON","stringify","setAuthorization","authorization","Authorization","setOptions","setCredentials","credentials"],"mappings":"grBAAMA,EAAkB,mBAAS,mBAAQ,mBACvC,SAACC,EAAOC,EAASC,EAAQC,UAAUC,EAAMC,yBACvBC,MAAQC,MAAUP,mCAMhCQ,EAAY,SAACJ,OACXK,KACFC,KAEEC,EAAS,SAACL,WACRM,6BAAW,WAAOC,8BAAsBC,2EAAjBC,oJAEAA,EAAnBR,OAAAA,aAAS,eACWG,EAAaM,QAAYP,EAAiBM,EAAQC,gBAClDN,EAAiBK,GAASC,QAASC,MAG9ClB,EAAgBK,EAAhBL,CAAuBO,EAAvBP,CAA6BQ,wBAK3BM,EAAKK,YAAmBJ,MAClC,eAAWK,OAAWA,EAAWC,yBAE3BC,QAAUC,QAAQnB,gBAASiB,0BACjCG,IAEHA,EAAIP,SAAWO,EAAIP,QAAQQ,IAAI,iBAAmBD,EAAIP,QAAQQ,IAAI,gBAAgBC,SAAS,2CAChFF,EAAIG,2FAGV,eAAeH,OAAWrB,OAAQkB,0CAIrClB,EAAWqB,EAAXrB,SACJA,GAAU,KAAOA,EAAS,IACnB,SAEA,QAFUyB,EAAMzB,qBAKpByB,wXAIR,MAAO,OAAQ,OAAQ,MAAO,SAAU,UAAW,WACjDC,QAAQ,SAACrB,KACCA,EAAOsB,eAAiB,SAAChB,EAAKc,OAAMZ,4DACrCC,OAAeD,EAAQC,SACzBE,EAAiBH,KAEjBY,IAAS,SAAU,SAASF,kBAAgBE,gBAAAA,IAAO,KAEjDG,EAAOH,EACLA,aAAgBI,aACZ,gBAAkBf,EAAQ,iBAAmB,qBAC9CgB,KAAKC,UAAUN,WAEFT,GAAgBY,uBAIlBZ,GAAgBX,SAAQS,YAEvCJ,EAASC,EAAKK,MAIpBN,YAIFsB,iBAAmB,SAACC,KAAiCC,cAAgBD,KACrEE,WAAa,SAACtB,KAA6BA,KAC3CuB,eAAiB,SAACC,UAAsC7B,GAAc6B,iBAEtE5B"}