{"version":3,"file":"index.js","sources":["src/http.js"],"sourcesContent":["const dispatchFactory = store => name => method =>\n  (event, payload, status) => store.dispatch({ type: `@@http/${name}>${method}>${event}`, payload, status })\n\nexport default (store) => {\n  const innerHeaders = {}\n\n  const driver = (name) => {\n    const ownFetch = async (url, options = {}, ...args) => {\n      // options\n      const { method = 'GET' } = options\n      const headers = { ...innerHeaders, ...options.headers }\n      const innerOptions = { ...options, headers }\n\n      // dispatcher\n      const dispatch = dispatchFactory(store)(name)(method)\n\n      // request\n      let data\n      let raw\n      dispatch('STARTED')\n      try {\n        raw = await (global || window).fetch(url, innerOptions, ...args)\n        data = raw\n\n        if (raw.headers && raw.headers.get('Content-Type') && raw.headers.get('Content-Type').includes('json')) {\n          data = await raw.json()\n        }\n      } catch (ex) {\n        dispatch('FAILED', ex, (raw || {}).status)\n        return ex\n      }\n\n      const { status } = raw\n      if (status >= 400 || status < 200) {\n        dispatch('FAILED', data, status)\n      } else {\n        dispatch('ENDED', data, status)\n      }\n\n      return data\n    }\n\n    // methods helpers\n    ['GET', 'POST', 'HEAD', 'PUT', 'DELETE', 'OPTIONS', 'CONNECT']\n      .forEach((method) => {\n        ownFetch[method.toLowerCase()] = (url, data, options = {}) => {\n          const { headers = {} } = options\n          let innerOptions = options\n\n          // attach data as JSON object\n          if (data && ['object', 'array'].includes(typeof data)) {\n            if (!headers['Content-Type']) innerOptions = { ...innerOptions, headers: { ...headers, 'Content-Type': 'application/json' } }\n\n            innerOptions = { ...innerOptions, body: JSON.stringify(data) }\n          }\n\n          // set method\n          innerOptions = { ...innerOptions, method }\n\n          return ownFetch(url, innerOptions)\n        }\n      })\n\n    return ownFetch\n  }\n\n  // custom helpers\n  driver.setAuthorization = (authorization) => {\n    innerHeaders.Authorization = authorization\n  }\n\n  return driver\n}\n"],"names":["dispatchFactory","event","payload","status","store","dispatch","type","name","method","innerHeaders","driver","ownFetch","url","args","options","headers","global","window","fetch","innerOptions","raw","get","includes","json","data","forEach","toLowerCase","Content-Type","body","JSON","stringify","setAuthorization","authorization","Authorization"],"mappings":"grBAAMA,EAAkB,mBAAS,mBAAQ,mBACvC,SAACC,EAAOC,EAASC,UAAWC,EAAMC,UAAWC,eAAgBC,MAAQC,MAAUP,EAASC,UAASC,+BAEnFC,OACRK,KAEAC,EAAS,SAACH,WACRI,6BAAW,WAAOC,8BAAsBC,yEAAjBC,oJAEAA,EAAnBN,OAAAA,aAAS,eACIC,EAAiBK,EAAQC,gBACpBD,GAASC,cAGlBf,EAAgBI,EAAhBJ,CAAuBO,EAAvBP,CAA6BQ,uBAKrC,iCAEMQ,QAAUC,QAAQC,eAAMN,EAAKO,YAAiBN,2BACpDO,IAEHA,EAAIL,SAAWK,EAAIL,QAAQM,IAAI,iBAAmBD,EAAIL,QAAQM,IAAI,gBAAgBC,SAAS,2CAChFF,EAAIG,2FAGV,eAAeH,OAAWjB,+CAI7BA,EAAWiB,EAAXjB,SACJA,GAAU,KAAOA,EAAS,IACnB,SAEA,QAFUqB,EAAMrB,qBAKpBqB,wXAIR,MAAO,OAAQ,OAAQ,MAAO,SAAU,UAAW,WACjDC,QAAQ,SAACjB,KACCA,EAAOkB,eAAiB,SAACd,EAAKY,OAAMV,8DAClBA,EAAjBC,QAAAA,kBACJI,EAAeL,SAGfU,IAAS,SAAU,SAASF,kBAAgBE,gBAAAA,MACzCT,EAAQ,kBAAiBI,OAAoBA,GAAcJ,aAAcA,GAASY,eAAgB,+BAEnFR,GAAcS,KAAMC,KAAKC,UAAUN,aAIrCL,GAAcX,WAE3BG,EAASC,EAAKO,MAIpBR,YAIFoB,iBAAmB,SAACC,KACZC,cAAgBD,GAGxBtB"}