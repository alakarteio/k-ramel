// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bugs should works with first level reducers 1`] = `
Object {
  "label": "yeah it works",
  "state": Object {
    "label": "yeah it works",
  },
}
`;

exports[`dispatch should dispatch a classic action 1`] = `
Object {
  "after": Object {
    "dumb": "ok !",
  },
  "before": Object {
    "dumb": "",
  },
  "dispatch": Object {
    "type": "SET_DUMB",
  },
}
`;

exports[`dispatch should dispatch string as a classic redux action 1`] = `
Object {
  "after": Object {
    "dumb": "ok !",
  },
  "before": Object {
    "dumb": "",
  },
  "dispatch": Object {
    "type": "SET_DUMB",
  },
}
`;

exports[`k-ramel with helpers should initialized 1`] = `
Object {
  "data": Object {
    "todos": Object {
      "data": Array [],
      "initialized": false,
    },
  },
  "ui": Object {
    "screens": Object {
      "newTodo": Object {},
    },
  },
}
`;

exports[`k-ramel with helpers should instanciate a keyValue reducer 1`] = `
Object {
  "state": Object {
    "data": Object {
      "todos": Object {
        "data": Array [
          Array [
            2,
            Object {
              "id": 2,
              "label": "find a name",
            },
          ],
        ],
        "initialized": true,
      },
    },
    "ui": Object {
      "screens": Object {
        "newTodo": Object {},
      },
    },
  },
  "todo": Object {
    "id": 2,
    "label": "find a name",
  },
}
`;

exports[`k-ramel with helpers should instanciate a simple.object reducer 1`] = `
Object {
  "label": "finish tests",
  "state": Object {
    "data": Object {
      "todos": Object {
        "data": Array [],
        "initialized": false,
      },
    },
    "ui": Object {
      "screens": Object {
        "newTodo": "finish tests",
      },
    },
  },
}
`;

exports[`k-ramel with plain object should initialized 1`] = `
Object {
  "data": Object {
    "todos": Object {
      "data": Array [],
      "initialized": false,
    },
  },
  "ui": Object {
    "screens": Object {
      "newTodo": Object {},
    },
  },
}
`;

exports[`k-ramel with plain object should instanciate a keyValue reducer 1`] = `
Object {
  "state": Object {
    "data": Object {
      "todos": Object {
        "data": Array [
          Array [
            2,
            Object {
              "id": 2,
              "label": "find a name",
            },
          ],
        ],
        "initialized": true,
      },
    },
    "ui": Object {
      "screens": Object {
        "newTodo": Object {},
      },
    },
  },
  "todo": Object {
    "id": 2,
    "label": "find a name",
  },
}
`;

exports[`k-ramel with plain object should instanciate a simple.object reducer 1`] = `
Object {
  "label": "finish tests",
  "state": Object {
    "data": Object {
      "todos": Object {
        "data": Array [],
        "initialized": false,
      },
    },
    "ui": Object {
      "screens": Object {
        "newTodo": "finish tests",
      },
    },
  },
}
`;

exports[`k-ramel with raw reducers should dispatch action to the raw reducer 1`] = `
Object {
  "config": "new config",
  "state": Object {
    "data": Object {
      "todos": Object {
        "data": Array [],
        "initialized": false,
      },
    },
    "ui": Object {
      "config": "new config",
      "screens": Object {
        "newTodo": Object {},
      },
    },
  },
}
`;

exports[`k-ramel with raw reducers should initialized 1`] = `
Object {
  "data": Object {
    "todos": Object {
      "data": Array [],
      "initialized": false,
    },
  },
  "ui": Object {
    "config": "defaultState",
    "screens": Object {
      "newTodo": Object {},
    },
  },
}
`;

exports[`k-ramel with raw reducers should instanciate a keyValue reducer 1`] = `
Object {
  "state": Object {
    "data": Object {
      "todos": Object {
        "data": Array [
          Array [
            2,
            Object {
              "id": 2,
              "label": "find a name",
            },
          ],
        ],
        "initialized": true,
      },
    },
    "ui": Object {
      "config": "defaultState",
      "screens": Object {
        "newTodo": Object {},
      },
    },
  },
  "todo": Object {
    "id": 2,
    "label": "find a name",
  },
}
`;

exports[`k-ramel with raw reducers should instanciate a simple.object reducer 1`] = `
Object {
  "label": "finish tests",
  "state": Object {
    "data": Object {
      "todos": Object {
        "data": Array [],
        "initialized": false,
      },
    },
    "ui": Object {
      "config": "defaultState",
      "screens": Object {
        "newTodo": "finish tests",
      },
    },
  },
}
`;

exports[`k-ramel without custom options hide redux should dispatch action 1`] = `
Object {
  "state": Object {
    "data": Object {
      "todos": Object {
        "data": Array [
          Array [
            "3",
            Object {
              "id": "3",
              "label": "hide-redux",
            },
          ],
        ],
        "initialized": true,
      },
    },
    "ui": Object {
      "screens": Object {
        "newTodo": Object {},
      },
    },
  },
  "todo": Object {
    "id": "3",
    "label": "hide-redux",
  },
}
`;

exports[`k-ramel without custom options hide redux should not mutate the state 1`] = `
Object {
  "state": Object {
    "data": Object {
      "todos": Object {
        "data": Array [],
        "initialized": false,
      },
    },
    "ui": Object {
      "screens": Object {
        "newTodo": Object {},
      },
    },
  },
}
`;

exports[`k-ramel without custom options init should init the state 1`] = `
Object {
  "state": Object {
    "data": Object {
      "todos": Object {
        "data": Array [],
        "initialized": false,
      },
    },
    "ui": Object {
      "screens": Object {
        "newTodo": "initial value!",
      },
    },
  },
}
`;

exports[`k-ramel without custom options middlewares should call middlewares 1`] = `
Object {
  "spy": Array [
    Array [
      Object {
        "action": Object {
          "type": "@@krml/INIT",
        },
        "state": Object {
          "data": Object {
            "todos": Object {
              "data": Array [],
              "initialized": false,
            },
          },
          "ui": Object {
            "screens": Object {
              "newTodo": Object {},
            },
          },
        },
      },
    ],
    Array [
      Object {
        "action": Object {
          "payload": "new",
          "type": "@@krf/SET>UI_SCREENS>NEWTODO",
        },
        "state": Object {
          "data": Object {
            "todos": Object {
              "data": Array [],
              "initialized": false,
            },
          },
          "ui": Object {
            "screens": Object {
              "newTodo": Object {},
            },
          },
        },
      },
    ],
  ],
  "state": Object {
    "data": Object {
      "todos": Object {
        "data": Array [],
        "initialized": false,
      },
    },
    "ui": Object {
      "screens": Object {
        "newTodo": "new",
      },
    },
  },
}
`;

exports[`listen middleware should catch action -function- 1`] = `
Array [
  Object {
    "payload": "this is dispatched !",
    "type": "@@krf/SET>CONFIG",
  },
  Object {
    "RESET": "@@krml/RESET",
    "config": [Function],
    "dispatch": [Function],
    "drivers": Object {},
    "getState": [Function],
    "listeners": Object {
      "add": [Function],
      "remove": [Function],
    },
    "replaceReducer": [Function],
    "reset": [Function],
    "subscribe": [Function],
    Symbol(observable): [Function],
  },
]
`;

exports[`listen middleware should catch action -regexp- 1`] = `
Array [
  Object {
    "payload": "this is dispatched !",
    "type": "@@krf/SET>CONFIG",
  },
  Object {
    "RESET": "@@krml/RESET",
    "config": [Function],
    "dispatch": [Function],
    "drivers": Object {},
    "getState": [Function],
    "listeners": Object {
      "add": [Function],
      "remove": [Function],
    },
    "replaceReducer": [Function],
    "reset": [Function],
    "subscribe": [Function],
    Symbol(observable): [Function],
  },
  Object {},
]
`;

exports[`listen middleware should catch action decorated by reaction hof 1`] = `
Array [
  Object {
    "payload": "this is dispatched !",
    "type": "@@krf/SET>CONFIG",
  },
  Object {
    "RESET": "@@krml/RESET",
    "config": [Function],
    "dispatch": [Function],
    "drivers": Object {},
    "getState": [Function],
    "listeners": Object {
      "add": [Function],
      "remove": [Function],
    },
    "replaceReducer": [Function],
    "reset": [Function],
    "subscribe": [Function],
    Symbol(observable): [Function],
  },
  Object {},
]
`;

exports[`listen middleware should catch action decorated by reaction hof, DSL way 1`] = `
Array [
  Object {
    "payload": "this is dispatched !",
    "type": "@@krf/SET>CONFIG",
  },
  Object {
    "RESET": "@@krml/RESET",
    "config": [Function],
    "dispatch": [Function],
    "drivers": Object {},
    "getState": [Function],
    "listeners": Object {
      "add": [Function],
      "remove": [Function],
    },
    "replaceReducer": [Function],
    "reset": [Function],
    "subscribe": [Function],
    Symbol(observable): [Function],
  },
  Object {},
]
`;

exports[`listen middleware should catch action decorated by reaction hof, DSL way, with multiple keys 1`] = `
Array [
  Object {
    "payload": "this is dispatched !",
    "type": "@@krf/SET>CONFIG",
  },
  Object {
    "RESET": "@@krml/RESET",
    "config": [Function],
    "dispatch": [Function],
    "drivers": Object {},
    "getState": [Function],
    "listeners": Object {
      "add": [Function],
      "remove": [Function],
    },
    "replaceReducer": [Function],
    "reset": [Function],
    "subscribe": [Function],
    Symbol(observable): [Function],
  },
  Object {},
]
`;

exports[`listen middleware should catch and dispatch a new action 1`] = `
Object {
  "state": Object {
    "config": "this is dispatched !",
    "saved": "SET_CONFIG is triggered :)",
  },
}
`;

exports[`listen middleware should dispatch an EXCEPTION action when reaction is on error 1`] = `
Object {
  "actions": Array [
    Array [
      Object {
        "payload": Object {
          "exception": [Error: Exception !],
          "from": Object {
            "payload": "this is dispatched !",
            "type": "@@krf/SET>CONFIG",
          },
          "message": "Exception !",
        },
        "type": "@@krml/EXCEPTION",
      },
    ],
  ],
}
`;

exports[`listen middleware should give drivers 1`] = `
Object {
  "dumbDriver": Array [
    Array [
      "I am called with a dumb driver, state is 2",
    ],
  ],
  "init": Array [
    Array [
      Object {
        "dispatch": [Function],
        "getState": [Function],
      },
    ],
  ],
}
`;

exports[`listen middleware should still dispatch events 1`] = `
Object {
  "config": "this is dispatched !",
  "state": Object {
    "config": "this is dispatched !",
  },
}
`;

exports[`redux devtools should add redux devtools to middlewares [w name, w enhancer] 1`] = `
Object {
  "devToolsEnhancer": Array [
    Array [
      [Function],
    ],
  ],
  "devToolsExtension": Array [
    Array [
      Object {
        "name": "my-store",
        "trace": false,
        "traceLimit": 25,
      },
    ],
  ],
  "otherEnhancer": Array [
    Array [
      [Function],
    ],
  ],
}
`;

exports[`redux devtools should add redux devtools to middlewares [w name, w/o enhancer] 1`] = `
Object {
  "devToolsEnhancer": Array [
    Array [
      [Function],
    ],
  ],
  "devToolsExtension": Array [
    Array [
      Object {
        "name": "my-store",
        "trace": false,
        "traceLimit": 25,
      },
    ],
  ],
}
`;

exports[`redux devtools should add redux devtools to middlewares [w/o name, w/o enhancer] 1`] = `
Object {
  "devToolsEnhancer": Array [
    Array [
      [Function],
    ],
  ],
  "devToolsExtension": Array [
    Array [
      Object {
        "name": "store",
        "trace": false,
        "traceLimit": 25,
      },
    ],
  ],
}
`;

exports[`redux devtools should not add redux devtools to middlewares 1`] = `
Object {
  "devToolsEnhancer": Array [],
  "devToolsExtension": Array [],
}
`;

exports[`reset should not auto dispatch 1`] = `
Object {
  "action": Object {
    "payload": undefined,
    "type": "@@krml/RESET",
  },
  "diffPaths": Array [
    "data.nested.current",
    "data.nested.other.reducer",
    "data.other",
    "ui.title",
  ],
}
`;

exports[`reset should reset a single reducer 1`] = `
Object {
  "action": Object {
    "payload": "data.nested.current",
    "type": "@@krml/RESET",
  },
  "diffPaths": Array [
    "data.nested.current",
  ],
}
`;

exports[`reset should reset all state 1`] = `
Object {
  "action": Object {
    "payload": undefined,
    "type": "@@krml/RESET",
  },
  "diffPaths": Array [
    "data.nested.current",
    "data.nested.other.reducer",
    "data.other",
    "ui.title",
  ],
}
`;

exports[`reset should reset custom reducers 1`] = `
Object {
  "action": Object {
    "payload": undefined,
    "type": "@@krml/RESET",
  },
  "diffPaths": Array [
    "data.custom",
    "ui",
  ],
}
`;

exports[`reset should reset part of the state 1`] = `
Object {
  "action": Object {
    "payload": "data.nested",
    "type": "@@krml/RESET",
  },
  "diffPaths": Array [
    "data.nested.current",
    "data.nested.other.reducer",
  ],
}
`;
