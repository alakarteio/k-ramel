{"version":3,"file":"index.js","sources":["src/createStore/reduxFactory.js","src/createStore/toContext.js","src/createStore/combine.js","src/createStore/enhanceRedux/addDevTools.js","src/createStore/enhanceRedux/listenFactory.js","src/createStore/enhanceRedux/enhanceRedux.js","src/createStore/createStore.js","src/factoryHelpers.js","src/reaction.js"],"sourcesContent":["import factory from 'k-redux-factory'\n\nexport default (root) => {\n  const subtree = (name, path) => {\n    // first run\n    if (name === undefined) {\n      return Object\n        .keys(root)\n        .map(key => ({ [key]: subtree(key, '') }))\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n    }\n\n    // other runs\n    const nextPath = `${path ? `${path}.` : ''}${name}`\n    const fullpath = `root.${nextPath}`\n    const options = eval(fullpath) // eslint-disable-line no-eval\n    const { type } = options\n\n    // - leaf\n    if (type) { // k-redux-factory\n      return factory({\n        name,\n        path,\n        prefix: (path && path.replace(/\\./g, '_')) || '',\n        ...options,\n      })\n    } else if (typeof options === 'function') { // custom reducer\n      return options\n    }\n\n    // - branch\n    return Object\n      .keys(options)\n      .map(key => ({ [key]: subtree(key, nextPath) }))\n      .reduce(\n        (acc, next) => ({ ...acc, ...next }),\n        {},\n      )\n  }\n\n  return subtree()\n}\n","const withParams = ['get', 'getBy', 'hasKey']\n\nconst keysConfig = {\n  keyValue: [\n    // actions\n    ['set', 'add', 'update', 'addOrUpdate', 'replace', 'remove', 'orderBy', 'reset'],\n    // selectors\n    ['get', 'getBy', 'getKeys', 'getAsArray', 'getLength', 'isInitialized', 'getState', 'hasKey'],\n  ],\n  simpleObject: [\n    // actions\n    ['set', 'update', 'reset'],\n    // selectors\n    ['get', 'isInitialized'],\n  ],\n}\n\nexport default (root, store) => {\n  const subcontext = (name, path) => {\n    // first run\n    if (name === undefined) {\n      return Object\n        .keys(root)\n        .map(key => ({ [key]: subcontext(key, '') }))\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n    }\n\n    // other runs\n    const nextPath = `${path ? `${path}.` : ''}${name}`\n    const fullpath = `root.${nextPath}`\n    const reducer = eval(fullpath) // eslint-disable-line no-eval\n\n    // - leaf\n    if (reducer.krfType !== undefined) {\n      const keys = keysConfig[reducer.krfType]\n      const [actions, selectors] = keys\n\n      const actionsObject = actions\n        .map((action) => {\n          const legacyAction = reducer[action]\n\n          return {\n            [action]: (...args) => store.dispatch(legacyAction(...args)),\n          }\n        })\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n      const selectorsObject = selectors\n        .map((selector) => {\n          const legacySelector = reducer[selector]\n\n          return {\n            [selector]: (...args) => {\n              if (withParams.includes(selector)) return legacySelector(...args)(store.getState())\n              return legacySelector(store.getState())\n            },\n          }\n        })\n        .reduce(\n          (acc, next) => ({ ...acc, ...next }),\n          {},\n        )\n\n      return Object.assign(reducer, actionsObject, selectorsObject)\n    }\n\n    // - branch\n    return Object\n      .keys(reducer)\n      .map(key => ({ [key]: subcontext(key, nextPath) }))\n      .reduce(\n        (acc, next) => ({ ...acc, ...next }),\n        {},\n      )\n  }\n\n  return subcontext()\n}\n","import { combineReducers } from 'redux'\n\nexport default (root) => {\n  const subcombine = (current) => {\n    const reducers = Object\n      .keys(current)\n      .map((key) => {\n        const cur = current[key]\n        if (typeof cur === 'function') return ({ [key]: cur })\n        return ({ [key]: subcombine(cur) })\n      })\n      .reduce(\n        (acc, curr) => ({ ...acc, ...curr }),\n        {},\n      )\n\n    return combineReducers(reducers)\n  }\n\n  return subcombine(root)\n}\n","import { compose } from 'redux'\n\nconst getReduxDevToolsEnhancer = name => window.devToolsExtension({ name })\n\nexport default (options) => {\n  const { name, devtools, enhancer } = options\n\n  // no devtool enable\n  if (!devtools || !window || !window.devToolsExtension) return enhancer\n\n  // return enhancer with devtools\n  const reduxDevtoolsEnhancer = getReduxDevToolsEnhancer(name)\n  if (enhancer) return compose(enhancer, reduxDevtoolsEnhancer)\n  return reduxDevtoolsEnhancer\n}\n","export default (rootListeners = [], drivers) => {\n  // k-ramel store\n  let innerStore\n\n  // k-ramel drivers (enhanced with store)\n  let innerDrivers\n\n  // k-ramel listners\n  let innerListeners = [rootListeners]\n\n  return {\n    // this setter is needed since the middleware is pass to redux\n    // createStore, and then BEFORE, we have store instanciated\n    setStore: (store) => {\n      innerStore = store\n      innerDrivers = Object\n        .keys(drivers)\n        .reduce(\n          (acc, driver) => ({ ...acc, [driver]: drivers[driver](store) }),\n          {},\n        )\n    },\n\n    // this is to add new listeners\n    addListeners: (listeners) => {\n      innerListeners = [...innerListeners, listeners]\n    },\n\n    // this is to remove listeners\n    removeListeners: (listeners) => {\n      innerListeners = innerListeners.filter(l => l !== listeners)\n    },\n\n    // redux middleware\n    middleware: () => next => (action) => {\n      // dispatch action\n      const res = next(action)\n\n      // trigger listeners\n      innerListeners\n        .forEach((listeners) => {\n          listeners.forEach((listener) => { listener(action, innerStore, innerDrivers) })\n        })\n\n      // return action result\n      return res\n    },\n  }\n}\n","import { compose, applyMiddleware } from 'redux'\nimport addDevTools from './addDevTools'\nimport listenFactory from './listenFactory'\n\n/* eslint-env browser */\nexport default (options) => {\n  const { listeners, drivers } = options\n  let { enhancer } = options\n\n  // add redux-devtools extension (if necessary)\n  enhancer = addDevTools(options)\n\n  // add custom listeners extension\n  const listen = listenFactory(listeners, drivers)\n\n  // add this middleware to enhancer\n  const middleware = applyMiddleware(listen.middleware)\n  if (enhancer) return { enhancer: compose(middleware, enhancer), listen }\n\n  return { enhancer: middleware, listen }\n}\n","import { createStore } from 'redux'\nimport http from '@k-ramel/driver-http'\nimport reduxFactory from './reduxFactory'\nimport toContext from './toContext'\nimport combine from './combine'\nimport enhanceRedux from './enhanceRedux'\n\nconst defaultOptions = {\n  hideRedux: true,\n  enhancer: undefined,\n  init: {},\n  listeners: undefined,\n  devtools: true,\n  name: 'store',\n  drivers: {\n    http,\n  },\n}\n\nexport default (definition, options = defaultOptions) => {\n  // options\n  const innerOptions = {\n    ...defaultOptions,\n    ...options,\n    drivers: {\n      ...defaultOptions.drivers,\n      ...options.drivers,\n    },\n  }\n  const { init, hideRedux } = innerOptions\n\n  // this is reducer exports (action/selectors)\n  let reducerTree = reduxFactory(definition)\n\n  // instanciate the listen middleware and prepare redux enhancers\n  const { enhancer, listen } = enhanceRedux(innerOptions)\n\n  // this is the redux store\n  const reduxStore = createStore(\n    combine(reducerTree),\n    init,\n    enhancer,\n  )\n\n  // convert to a contextualized version\n  if (hideRedux) {\n    reducerTree = toContext(reducerTree, reduxStore)\n  }\n\n  // exported store (our own)\n  const store = {\n    ...reducerTree,\n    ...reduxStore,\n    listeners: {\n      add: listen.addListeners,\n      remove: listen.removeListeners,\n    },\n  }\n\n  // custom dispatch\n  const reduxDispatch = store.dispatch\n  store.dispatch = (action, ...args) => {\n    if (typeof action === 'string') return reduxDispatch({ type: action })\n    return reduxDispatch(action, ...args)\n  }\n\n  // pass store to listen (after it has been created)\n  listen.setStore(store)\n\n  return store\n}\n","export const keyValue = params => ({ ...params, type: 'keyValue' })\nexport const simpleObject = params => ({ ...params, type: 'simpleObject' })\n","import { isRegExp, isString, isFunction } from 'lodash'\n\nconst isMatching = (action, store) => matcher => ( // test matching\n  // to a string\n  (\n    isString(matcher) &&\n    action.type === matcher\n  )\n  // to a function\n  || (\n    isFunction(matcher) &&\n    matcher(action, store)\n  )\n  // to a regexp\n  || (\n    isRegExp(matcher) &&\n    action.type.match(matcher)\n  )\n)\n\nexport const when = (...matchers) => callback => (action, store, drivers) => {\n  const match = matchers\n    .map(isMatching(action, store))\n    .reduce((acc, curr) => acc && curr, true)\n\n  if (match) return callback(action, store, drivers)\n  return false\n}\n\nexport const reaction = fn => Object.assign(\n  fn,\n  { when: (...args) => when(...args)(fn) },\n)\n\nexport const reactions = fns => Object.keys(fns)\n  .reduce((acc, curr) => ({ ...acc, [curr]: reaction(fns[curr]) }), {})\n"],"names":["root","subtree","name","path","undefined","Object","keys","map","key","reduce","acc","next","nextPath","fullpath","options","eval","type","factory","replace","withParams","keysConfig","store","subcontext","reducer","krfType","actions","selectors","actionsObject","action","legacyAction","dispatch","selectorsObject","selector","legacySelector","includes","getState","assign","subcombine","current","reducers","cur","curr","combineReducers","getReduxDevToolsEnhancer","window","devToolsExtension","devtools","enhancer","reduxDevtoolsEnhancer","compose","rootListeners","drivers","innerStore","innerDrivers","innerListeners","driver","listeners","filter","l","res","forEach","listener","addDevTools","listen","listenFactory","middleware","applyMiddleware","defaultOptions","definition","innerOptions","init","hideRedux","reducerTree","reduxFactory","enhanceRedux","reduxStore","createStore","combine","toContext","addListeners","removeListeners","reduxDispatch","args","setStore","keyValue","params","simpleObject","isMatching","matcher","isRegExp","match","when","matchers","callback","reaction","fn","reactions","fns"],"mappings":"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"}