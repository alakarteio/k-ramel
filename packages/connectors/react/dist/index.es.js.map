{"version":3,"file":"index.es.js","sources":["../src/getWrappedDisplayName.js","../src/createContext.js","../src/inject.jsx","../src/provider.jsx","../src/listen.jsx"],"sourcesContent":["export default Component => (\n  Component.displayName\n  || Component.name\n  || (Component.constructor && Component.constructor.name)\n  || 'Unknown'\n)\n","import { createContext } from 'react'\n\n// this is a singleton :(\nlet context\n\nexport default () => {\n  if (!context) context = createContext()\n  return context\n}\n","import React from 'react'\nimport shallowEqual from 'fbjs/lib/shallowEqual'\nimport getWrappedDisplayName from './getWrappedDisplayName'\nimport createContext from './createContext'\n\nconst defaultObject = {}\n\nconst withoutFunctions = object => Object\n  .keys(object)\n  .reduce(\n    (acc, key) => {\n      const value = object[key]\n      if (typeof value === 'function') return acc\n      return { ...acc, [key]: value }\n    },\n    defaultObject,\n  )\n\nconst getDerivedStateFromProps = injectFunction => (nextProps, prevState) => {\n  const { store } = prevState\n\n  // get props derivated from redux state\n  const injectedProps = injectFunction(store, nextProps.ownProps, store.drivers)\n\n  // no modifications ?\n  if (\n    shallowEqual(\n      withoutFunctions(prevState.injectedProps),\n      withoutFunctions(injectedProps),\n    )\n  ) return null\n\n  return { ...prevState, injectedProps, state: store.getState() }\n}\n\nconst wrapper = injectFunction => Component => class extends React.Component {\n  static getDerivedStateFromProps = getDerivedStateFromProps(injectFunction)\n\n  static propTypes = {\n    store: () => null,\n  }\n\n  static defaultProps = {\n    store: undefined,\n  }\n\n  constructor(props) {\n    super(props)\n\n    const { store } = props\n\n    this.state = getDerivedStateFromProps(injectFunction)(\n      this.props,\n      {\n        // needed for first call (where we shallow compare old and new one)\n        injectedProps: defaultObject,\n        // store needed to call injectFunction\n        store,\n      },\n    )\n  }\n\n  componentDidMount() {\n    const { store } = this.props\n\n    this.unsubscribe = store.subscribe(() => {\n      if (this.state.state !== store.getState()) {\n        const newState = getDerivedStateFromProps(injectFunction)(this.props, this.state)\n\n        if (newState !== null) this.setState(newState)\n      }\n    })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  render() {\n    const { ownProps, injectedProps } = this.state\n\n    return (\n      <Component\n        {...ownProps}\n        {...injectedProps}\n      />\n    )\n  }\n}\n\nexport default (injectFunction) => {\n  const { Consumer } = createContext()\n  const withInjectFunction = wrapper(injectFunction)\n\n  return (Component) => {\n    const WrappedComponent = withInjectFunction(Component)\n\n    const WithConsumer = props => (\n      <Consumer>\n        {store => <WrappedComponent ownProps={props} store={store} />}\n      </Consumer>\n    )\n\n    WithConsumer.displayName = `inject(${getWrappedDisplayName(Component)}`\n\n    return WithConsumer\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nimport React, { Component } from 'react'\nimport getWrappedDisplayName from './getWrappedDisplayName'\nimport createContext from './createContext'\n\nexport default (store) => {\n  const { Provider } = createContext()\n\n  return WrappedComponent => class extends Component {\n    static displayName = `provider(${getWrappedDisplayName(WrappedComponent)})`\n\n    componentWillMount() {\n      store.dispatch('@@krml/INIT')\n    }\n\n    render() {\n      return (\n        <Provider value={store}>\n          <WrappedComponent {...this.props} />\n        </Provider>\n      )\n    }\n  }\n}\n","import React from 'react'\nimport createContext from './createContext'\nimport getWrappedDisplayName from './getWrappedDisplayName'\n\nconst defaultListeners = []\n\nconst toActionFactory = (name) => {\n  const suffix = `${name ? '>' : ''}${name || ''}`\n  return type => `@@krml/LISTENERS>${type}${suffix}`\n}\n\nconst defaultObject = {}\n\nconst wrapper = (listeners, name) => (WrappedComponent) => {\n  const toAction = toActionFactory(name)\n\n  return class extends React.Component {\n    static propTypes = {\n      store: () => null,\n      ownProps: () => null,\n    }\n\n    static defaultProps = {\n      store: undefined,\n      ownProps: defaultObject,\n    }\n\n    componentDidMount() {\n      const { store } = this.props\n\n      store.listeners.add(listeners)\n      store.dispatch(toAction('ADDED'))\n    }\n\n    componentWillUnmount() {\n      const { store } = this.props\n\n      store.dispatch(toAction('REMOVING'))\n      store.listeners.remove(listeners)\n    }\n\n    render() {\n      return <WrappedComponent {...this.props.ownProps} />\n    }\n  }\n}\n\nexport default (listeners = defaultListeners, name) => {\n  const { Consumer } = createContext()\n\n  const withListeners = wrapper(listeners, name)\n\n  return (Component) => {\n    const WrappedComponent = withListeners(Component)\n\n    const WithConsumer = props => (\n      <Consumer>\n        {store => <WrappedComponent ownProps={props} store={store} />}\n      </Consumer>\n    )\n\n    WithConsumer.displayName = `listen(${getWrappedDisplayName(Component)}`\n\n    return WithConsumer\n  }\n}\n"],"names":["Component","displayName","name","constructor","context","createContext","defaultObject","withoutFunctions","Object","keys","object","reduce","acc","key","value","getDerivedStateFromProps","nextProps","prevState","store","injectedProps","injectFunction","ownProps","drivers","shallowEqual","state","getState","wrapper","props","_this","this","unsubscribe","subscribe","_this2","newState","setState","React","propTypes","defaultProps","undefined","Consumer","withInjectFunction","WrappedComponent","WithConsumer","getWrappedDisplayName","Provider","dispatch","defaultListeners","toActionFactory","suffix","type","listeners","toAction","add","remove","withListeners"],"mappings":"kGAAA,6CACEA,EAAUC,aACPD,EAAUE,MACTF,EAAUG,aAAeH,EAAUG,YAAYD,MAChD,WCDDE,iDAGGA,UAASA,QAAUC,iBACjBD,oqCCFHE,iBAEAC,iBAAmB,mBAAUC,OAChCC,KAAKC,GACLC,OACC,SAACC,EAAKC,OACEC,EAAQJ,EAAOG,SACA,mBAAVC,EAA6BF,cAC5BA,oBAAMC,EAAMC,KAE1BR,gBAGES,yBAA2B,mBAAkB,SAACC,EAAWC,OACrDC,EAAUD,EAAVC,MAGFC,EAAgBC,EAAeF,EAAOF,EAAUK,SAAUH,EAAMI,gBAIpEC,aACEhB,iBAAiBU,EAAUE,eAC3BZ,iBAAiBY,IAEZ,iBAEGF,GAAWE,gBAAeK,MAAON,EAAMO,eAG/CC,QAAU,mBAAkB,sDAWpBC,iHACJA,IAEET,EAAUS,EAAVT,eAEHM,MAAQT,yBAAyBK,EAAzBL,CACXa,EAAKD,qBAGYrB,mHAQXY,EAAUW,KAAKF,MAAfT,WAEHY,YAAcZ,EAAMa,UAAU,cAC7BC,EAAKR,MAAMA,QAAUN,EAAMO,WAAY,KACnCQ,EAAWlB,yBAAyBK,EAAzBL,CAAyCiB,EAAKL,MAAOK,EAAKR,OAE1D,OAAbS,GAAmBD,EAAKE,SAASD,0DAMpCH,qDAI+BD,KAAKL,MAAjCH,IAAAA,SAAUF,IAAAA,qBAGhBgB,oBAACnC,cACKqB,EACAF,WAjDiDgB,MAAMnC,aAC1De,yBAA2BA,yBAAyBK,KAEpDgB,iBACE,kBAAM,SAGRC,yBACEC,uBA+CKlB,OACNmB,EAAalC,kBAAbkC,SACFC,EAAqBd,QAAQN,UAE5B,SAACpB,OACAyC,EAAmBD,EAAmBxC,GAEtC0C,EAAe,mBACnBP,8CACYA,oBAACM,GAAiBpB,SAAUM,EAAOT,MAAOA,gBAI3CjB,sBAAwB0C,sBAAsB3C,GAEpD0C,sBCpGKxB,OACN0B,EAAavC,kBAAbuC,gBAED,sMAAkC5C,uEAI/B6C,SAAS,uDAKbV,uBAAUrB,MAAOI,uBACduB,EAAqBZ,KAAKF,mBAT1B1B,wBAA0B0C,sBAAsBF,WCLrDK,oBAEAC,gBAAkB,SAAC7C,OACjB8C,GAAY9C,EAAO,IAAM,KAAKA,GAAQ,WACrC,sCAA4B+C,EAAOD,IAGtC1C,mBAEAoB,UAAU,SAACwB,EAAWhD,UAAS,SAACuC,WAC9BU,EAAWJ,gBAAgB7C,qPAcrBgB,EAAUW,KAAKF,MAAfT,QAEFgC,UAAUE,IAAIF,KACdL,SAASM,EAAS,6DAIhBjC,EAAUW,KAAKF,MAAfT,QAEF2B,SAASM,EAAS,eAClBD,UAAUG,OAAOH,2CAIhBf,oBAACM,EAAqBZ,KAAKF,MAAMN,iBA1BvBc,MAAMnC,aAClBoC,iBACE,kBAAM,eACH,kBAAM,SAGXC,yBACEC,WACGhC,2CAuBA4C,yDAAYJ,iBAAkB5C,eACpCqC,EAAalC,kBAAbkC,SAEFe,EAAgB5B,UAAQwB,EAAWhD,UAElC,SAACF,OACAyC,EAAmBa,EAActD,GAEjC0C,EAAe,mBACnBP,8CACYA,oBAACM,GAAiBpB,SAAUM,EAAOT,MAAOA,gBAI3CjB,sBAAwB0C,sBAAsB3C,GAEpD0C"}