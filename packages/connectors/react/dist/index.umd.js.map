{"version":3,"file":"index.umd.js","sources":["../src/getWrappedDisplayName.js","../src/createContext.js","../src/inject.jsx","../src/provider.jsx","../src/listen.jsx"],"sourcesContent":["export default Component => (\n  Component.displayName\n  || Component.name\n  || (Component.constructor && Component.constructor.name)\n  || 'Unknown'\n)\n","import { createContext } from 'react'\n\n// this is a singleton :(\nlet context\n\nexport default () => {\n  if (!context) context = createContext()\n  return context\n}\n","import React from 'react'\nimport shallowEqual from 'fbjs/lib/shallowEqual'\nimport getWrappedDisplayName from './getWrappedDisplayName'\nimport createContext from './createContext'\n\nconst defaultObject = {}\n\nconst withoutFunctions = object => Object\n  .keys(object)\n  .reduce(\n    (acc, key) => {\n      const value = object[key]\n      if (typeof value === 'function') return acc\n      return { ...acc, [key]: value }\n    },\n    defaultObject,\n  )\n\nconst getDerivedStateFromProps = injectFunction => (nextProps, prevState) => {\n  const { store } = prevState\n\n  // get props derivated from redux state\n  const injectedProps = injectFunction(store, nextProps.ownProps, store.drivers)\n\n  console.log('get derivated')\n  // no modifications ?\n  if (\n    shallowEqual(\n      withoutFunctions(prevState.injectedProps),\n      withoutFunctions(injectedProps),\n    )\n  ) return null\n\n  return { ...prevState, injectedProps, state: store.getState() }\n}\n\nconst wrapper = injectFunction => Component => class extends React.Component {\n  static getDerivedStateFromProps = getDerivedStateFromProps(injectFunction)\n\n  constructor(props) {\n    super(props)\n\n    const { store } = props\n\n    this.mounted = false\n    this.state = getDerivedStateFromProps(injectFunction)(\n      this.props,\n      {\n        // needed for first call (where we shallow compare old and new one)\n        injectedProps: defaultObject,\n        // store needed to call injectFunction\n        store,\n      },\n    )\n\n    console.log('constructor', Component.displayName)\n  }\n\n  componentDidMount() {\n    console.log('didmount', Component.displayName)\n\n    const { store } = this.props\n\n    this.unsubscribe = store.subscribe(() => {\n      console.log('subscribe', Component.displayName)\n      if (this.state.state !== store.getState()) {\n        const newState = getDerivedStateFromProps(injectFunction)(this.props, this.state)\n        console.log('get derivated - subscribe', Component.displayName)\n\n        if (newState !== null) {\n          if (!this.mounted) this.state = newState\n          else this.setState(newState)\n        }\n      }\n    })\n  }\n\n  componentWillUnmount() {\n    console.log('unmount')\n    this.unsubscribe()\n  }\n\n  render() {\n    const { ownProps, injectedProps } = this.state\n\n    this.mounted = true\n\n    return (\n      <Component\n        {...ownProps}\n        {...injectedProps}\n      />\n    )\n  }\n}\n\nexport default (injectFunction) => {\n  const { Consumer } = createContext()\n  const withInjectFunction = wrapper(injectFunction)\n\n  return (Component) => {\n    const WrappedComponent = withInjectFunction(Component)\n\n    const WithConsumer = props => (\n      <Consumer>\n        {(store) => {\n          console.log('new store from context', WithConsumer.displayName)\n          return <WrappedComponent ownProps={props} store={store} />\n        }}\n      </Consumer>\n    )\n\n    WithConsumer.displayName = `inject(${getWrappedDisplayName(Component)}`\n\n    console.log('hoc', WithConsumer.displayName)\n\n    return WithConsumer\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nimport React, { Component } from 'react'\nimport getWrappedDisplayName from './getWrappedDisplayName'\nimport createContext from './createContext'\n\nexport default (store) => {\n  const { Provider } = createContext()\n\n  return WrappedComponent => class extends Component {\n    static displayName = `provider(${getWrappedDisplayName(WrappedComponent)})`\n\n    componentWillMount() {\n      store.dispatch('@@krml/INIT')\n    }\n\n    render() {\n      return (\n        <Provider value={store}>\n          <WrappedComponent {...this.props} />\n        </Provider>\n      )\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport getWrappedDisplayName from './getWrappedDisplayName'\n\nconst defaultListeners = []\n\nconst toActionFactory = (name) => {\n  const suffix = `${name ? '>' : ''}${name || ''}`\n  return type => `@@krml/LISTENERS>${type}${suffix}`\n}\n\nexport default (listeners = defaultListeners, name) => (WrappedComponent) => {\n  const toAction = toActionFactory(name)\n\n  return class extends Component {\n    static displayName = `listen(${getWrappedDisplayName(WrappedComponent)}`\n\n    static contextTypes = {\n      store: () => null, // this is to avoid importing prop-types\n    }\n\n    componentWillMount() {\n      const { store } = this.context\n\n      store.listeners.add(listeners)\n      store.dispatch(toAction('ADDED'))\n    }\n\n    componentWillUnmount() {\n      const { store } = this.context\n\n      store.dispatch(toAction('REMOVING'))\n      store.listeners.remove(listeners)\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />\n    }\n  }\n}\n"],"names":["Component","displayName","name","constructor","context","createContext","defaultObject","withoutFunctions","Object","keys","object","reduce","acc","key","value","getDerivedStateFromProps","nextProps","prevState","store","injectedProps","injectFunction","ownProps","drivers","console","log","shallowEqual","state","getState","wrapper","props","mounted","unsubscribe","subscribe","newState","setState","React","Consumer","withInjectFunction","WrappedComponent","WithConsumer","getWrappedDisplayName","Provider","dispatch","defaultListeners","toActionFactory","suffix","type","listeners","toAction","add","remove","contextTypes"],"mappings":"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"}