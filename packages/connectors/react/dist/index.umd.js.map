{"version":3,"file":"index.umd.js","sources":["../src/getWrappedDisplayName.js","../src/createContext.js","../src/inject.jsx","../src/listen.jsx","../src/provider.jsx"],"sourcesContent":["export default Component => (\n  Component.displayName\n  || Component.name\n  || (Component.constructor && Component.constructor.name)\n  || 'Unknown'\n)\n","import { createContext } from 'react'\n\n// this is a singleton :(\nlet context\n\nexport default () => {\n  if (!context) context = createContext()\n  return context\n}\n","import React from 'react'\nimport shallowEqual from 'fbjs/lib/shallowEqual'\nimport getWrappedDisplayName from './getWrappedDisplayName'\nimport createContext from './createContext'\n\nconst defaultObject = {}\n\nconst withoutFunctions = object => Object\n  .keys(object)\n  .reduce(\n    (acc, key) => {\n      const value = object[key]\n      if (typeof value === 'function') return acc\n      return { ...acc, [key]: value }\n    },\n    defaultObject,\n  )\n\nconst getDerivedStateFromProps = injectFunction => (nextProps, prevState) => {\n  const { store } = prevState\n\n  // get props derivated from redux state\n  const injectedProps = injectFunction(store, nextProps.ownProps, store.drivers)\n\n  // no modifications ?\n  if (\n    shallowEqual(\n      withoutFunctions(prevState.injectedProps),\n      withoutFunctions(injectedProps),\n    )\n  ) return null\n\n  return { ...prevState, injectedProps, state: store.getState() }\n}\n\nconst wrapper = injectFunction => Component => class extends React.Component {\n  static getDerivedStateFromProps = getDerivedStateFromProps(injectFunction)\n\n  static propTypes = {\n    store: () => null,\n  }\n\n  static defaultProps = {\n    store: undefined,\n  }\n\n  constructor(props) {\n    super(props)\n\n    const { store } = props\n\n    this.mounted = false\n    this.state = getDerivedStateFromProps(injectFunction)(\n      this.props,\n      {\n        // needed for first call (where we shallow compare old and new one)\n        injectedProps: defaultObject,\n        // store needed to call injectFunction\n        store,\n      },\n    )\n  }\n\n  componentDidMount() {\n    const { store } = this.props\n\n    this.unsubscribe = store.subscribe(() => {\n      if (this.state.state !== store.getState()) {\n        const newState = getDerivedStateFromProps(injectFunction)(this.props, this.state)\n\n        if (newState !== null) {\n          if (!this.mounted) this.state = newState\n          else this.setState(newState)\n        }\n      }\n    })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  render() {\n    const { ownProps, injectedProps } = this.state\n\n    this.mounted = true\n\n    return (\n      <Component\n        {...ownProps}\n        {...injectedProps}\n      />\n    )\n  }\n}\n\nexport default (injectFunction) => {\n  const { Consumer } = createContext()\n  const withInjectFunction = wrapper(injectFunction)\n\n  return (Component) => {\n    const WrappedComponent = withInjectFunction(Component)\n\n    const WithConsumer = props => (\n      <Consumer>\n        {store => <WrappedComponent ownProps={props} store={store} />}\n      </Consumer>\n    )\n\n    WithConsumer.displayName = `inject(${getWrappedDisplayName(Component)}`\n\n    return WithConsumer\n  }\n}\n","import React, { Component } from 'react'\nimport getWrappedDisplayName from './getWrappedDisplayName'\n\nconst defaultListeners = []\n\nconst toActionFactory = (name) => {\n  const suffix = `${name ? '>' : ''}${name || ''}`\n  return type => `@@krml/LISTENERS>${type}${suffix}`\n}\n\nexport default (listeners = defaultListeners, name) => (WrappedComponent) => {\n  const toAction = toActionFactory(name)\n\n  return class extends Component {\n    static displayName = `listen(${getWrappedDisplayName(WrappedComponent)}`\n\n    static contextTypes = {\n      store: () => null, // this is to avoid importing prop-types\n    }\n\n    componentWillMount() {\n      const { store } = this.context\n\n      store.listeners.add(listeners)\n      store.dispatch(toAction('ADDED'))\n    }\n\n    componentWillUnmount() {\n      const { store } = this.context\n\n      store.dispatch(toAction('REMOVING'))\n      store.listeners.remove(listeners)\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />\n    }\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nimport React, { Component } from 'react'\nimport getWrappedDisplayName from './getWrappedDisplayName'\nimport createContext from './createContext'\n\nexport default (store) => {\n  const { Provider } = createContext()\n\n  return WrappedComponent => class extends Component {\n    static displayName = `provider(${getWrappedDisplayName(WrappedComponent)})`\n\n    componentWillMount() {\n      store.dispatch('@@krml/INIT')\n    }\n\n    render() {\n      return (\n        <Provider value={store}>\n          <WrappedComponent {...this.props} />\n        </Provider>\n      )\n    }\n  }\n}\n"],"names":["Component","displayName","name","constructor","context","createContext","defaultObject","withoutFunctions","Object","keys","object","reduce","acc","key","value","getDerivedStateFromProps","nextProps","prevState","store","injectedProps","injectFunction","ownProps","drivers","shallowEqual","state","getState","defaultListeners","Consumer","withInjectFunction","props","mounted","_this","this","unsubscribe","subscribe","_this2","newState","setState","React","propTypes","defaultProps","undefined","wrapper","WrappedComponent","WithConsumer","getWrappedDisplayName","Provider","dispatch","listeners","toAction","suffix","type","toActionFactory","add","remove","contextTypes"],"mappings":"maACEA,EAAUC,aACPD,EAAUE,MACTF,EAAUG,aAAeH,EAAUG,YAAYD,MAChD,WCDDE,6BAGGA,IAASA,EAAUC,mBACjBD,29BCFHE,KAEAC,EAAmB,mBAAUC,OAChCC,KAAKC,GACLC,OACC,SAACC,EAAKC,OACEC,EAAQJ,EAAOG,SACA,mBAAVC,EAA6BF,OAC5BA,4HAAMC,EAAMC,KAE1BR,IAGES,EAA2B,mBAAkB,SAACC,EAAWC,OACrDC,EAAUD,EAAVC,MAGFC,EAAgBC,EAAeF,EAAOF,EAAUK,SAAUH,EAAMI,gBAIpEC,EACEhB,EAAiBU,EAAUE,eAC3BZ,EAAiBY,IAEZ,UAEGF,GAAWE,gBAAeK,MAAON,EAAMO,eC7B/CC,uBD6FUN,OACNO,EAAatB,IAAbsB,SACFC,EA/DQ,mBAAkB,sDAWpBC,4EACJA,IAEEX,EAAUW,EAAVX,eAEHY,SAAU,IACVN,MAAQT,EAAyBK,EAAzBL,CACXgB,EAAKF,qBAGYvB,sFAQXY,EAAUc,KAAKH,MAAfX,WAEHe,YAAcf,EAAMgB,UAAU,cAC7BC,EAAKX,MAAMA,QAAUN,EAAMO,WAAY,KACnCW,EAAWrB,EAAyBK,EAAzBL,CAAyCoB,EAAKN,MAAOM,EAAKX,OAE1D,OAAbY,IACGD,EAAKL,QACLK,EAAKE,SAASD,GADAD,EAAKX,MAAQY,0DAQjCH,qDAI+BD,KAAKR,MAAjCH,IAAAA,SAAUF,IAAAA,0BAEbW,SAAU,EAGbQ,gBAACtC,OACKqB,EACAF,WAvDiDmB,EAAMtC,aAC1De,yBAA2BA,EAAyBK,KAEpDmB,iBACE,kBAAM,SAGRC,yBACEC,MAuDkBC,CAAQtB,UAE5B,SAACpB,OACA2C,EAAmBf,EAAmB5B,GAEtC4C,EAAe,mBACnBN,0CACYA,gBAACK,GAAiBtB,SAAUQ,EAAOX,MAAOA,gBAI3CjB,sBAAwB4C,EAAsB7C,GAEpD4C,wBE1GK1B,OACN4B,EAAazC,IAAbyC,gBAED,+MAIGC,SAAS,uDAKbT,mBAAUxB,MAAOI,mBACdyB,EAAqBX,KAAKH,eAVM7B,eAChCC,wBAA0B4C,EAAsBF,mCDC3CK,yDAAYtB,EAAkBxB,sBAAS,SAACyC,WAChDM,EANgB,SAAC/C,OACjBgD,GAAYhD,EAAO,IAAM,KAAKA,GAAQ,WACrC,sCAA4BiD,EAAOD,GAIzBE,CAAgBlD,gMAUrBgB,EAAUc,KAAK5B,QAAfc,QAEF8B,UAAUK,IAAIL,KACdD,SAASE,EAAS,6DAIhB/B,EAAUc,KAAK5B,QAAfc,QAEF6B,SAASE,EAAS,eAClBD,UAAUM,OAAON,2CAIhBV,gBAACK,EAAqBX,KAAKH,cAtBjB7B,eACZC,sBAAwB4C,EAAsBF,KAE9CY,oBACE,kBAAM"}