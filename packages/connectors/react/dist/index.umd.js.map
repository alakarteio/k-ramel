{"version":3,"file":"index.umd.js","sources":["../src/getWrappedDisplayName.js","../src/createContext.js","../src/inject.jsx","../src/listen.jsx","../src/provider.jsx"],"sourcesContent":["export default Component => (\n  Component.displayName\n  || Component.name\n  || (Component.constructor && Component.constructor.name)\n  || 'Unknown'\n)\n","import { createContext } from 'react'\n\n// this is a singleton :(\nlet context\n\nexport default () => {\n  if (!context) context = createContext()\n  return context\n}\n","import React from 'react'\nimport shallowEqual from 'fbjs/lib/shallowEqual'\nimport getWrappedDisplayName from './getWrappedDisplayName'\nimport createContext from './createContext'\n\nconst defaultObject = {}\n\nconst withoutFunctions = object => Object\n  .keys(object)\n  .reduce(\n    (acc, key) => {\n      const value = object[key]\n      if (typeof value === 'function') return acc\n      return { ...acc, [key]: value }\n    },\n    defaultObject,\n  )\n\nconst getDerivedStateFromProps = injectFunction => (nextProps, prevState) => {\n  const { store } = prevState\n\n  // get props derivated from redux state\n  const injectedProps = injectFunction(store, nextProps.ownProps, store.drivers)\n\n  // no modifications ?\n  if (\n    shallowEqual(\n      withoutFunctions(prevState.injectedProps),\n      withoutFunctions(injectedProps),\n    )\n  ) return null\n\n  return { ...prevState, injectedProps, state: store.getState() }\n}\n\nconst wrapper = injectFunction => Component => class extends React.Component {\n  static getDerivedStateFromProps = getDerivedStateFromProps(injectFunction)\n\n  static propTypes = {\n    store: () => null,\n  }\n\n  static defaultProps = {\n    store: undefined,\n  }\n\n  constructor(props) {\n    super(props)\n\n    const { store } = props\n\n    this.state = getDerivedStateFromProps(injectFunction)(\n      this.props,\n      {\n        // needed for first call (where we shallow compare old and new one)\n        injectedProps: defaultObject,\n        // store needed to call injectFunction\n        store,\n      },\n    )\n  }\n\n  componentDidMount() {\n    const { store } = this.props\n\n    this.unsubscribe = store.subscribe(() => {\n      if (this.state.state !== store.getState()) {\n        const newState = getDerivedStateFromProps(injectFunction)(this.props, this.state)\n\n        if (newState !== null) this.setState(newState)\n      }\n    })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe()\n  }\n\n  render() {\n    const { ownProps, injectedProps } = this.state\n\n    return (\n      <Component\n        {...ownProps}\n        {...injectedProps}\n      />\n    )\n  }\n}\n\nexport default (injectFunction) => {\n  const { Consumer } = createContext()\n  const withInjectFunction = wrapper(injectFunction)\n\n  return (Component) => {\n    const WrappedComponent = withInjectFunction(Component)\n\n    const WithConsumer = props => (\n      <Consumer>\n        {store => <WrappedComponent ownProps={props} store={store} />}\n      </Consumer>\n    )\n\n    WithConsumer.displayName = `inject(${getWrappedDisplayName(Component)}`\n\n    return WithConsumer\n  }\n}\n","import React from 'react'\nimport createContext from './createContext'\nimport getWrappedDisplayName from './getWrappedDisplayName'\n\nconst defaultListeners = []\n\nconst toActionFactory = (name) => {\n  const suffix = `${name ? '>' : ''}${name || ''}`\n  return type => `@@krml/LISTENERS>${type}${suffix}`\n}\n\nconst defaultObject = {}\n\nconst wrapper = (listeners, name) => (WrappedComponent) => {\n  const toAction = toActionFactory(name)\n\n  return class extends React.Component {\n    static propTypes = {\n      store: () => null,\n      ownProps: () => null,\n    }\n\n    static defaultProps = {\n      store: undefined,\n      ownProps: defaultObject,\n    }\n\n    componentDidMount() {\n      const { store } = this.props\n\n      store.listeners.add(listeners)\n      store.dispatch(toAction('ADDED'))\n    }\n\n    componentWillUnmount() {\n      const { store } = this.props\n\n      store.dispatch(toAction('REMOVING'))\n      store.listeners.remove(listeners)\n    }\n\n    render() {\n      return <WrappedComponent {...this.props.ownProps} />\n    }\n  }\n}\n\nexport default (listeners = defaultListeners, name) => {\n  const { Consumer } = createContext()\n\n  const withListeners = wrapper(listeners, name)\n\n  return (Component) => {\n    const WrappedComponent = withListeners(Component)\n\n    const WithConsumer = props => (\n      <Consumer>\n        {store => <WrappedComponent ownProps={props} store={store} />}\n      </Consumer>\n    )\n\n    WithConsumer.displayName = `listen(${getWrappedDisplayName(Component)}`\n\n    return WithConsumer\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nimport React, { Component } from 'react'\nimport getWrappedDisplayName from './getWrappedDisplayName'\nimport createContext from './createContext'\n\nexport default (store) => {\n  const { Provider } = createContext()\n\n  return WrappedComponent => class extends Component {\n    static displayName = `provider(${getWrappedDisplayName(WrappedComponent)})`\n\n    componentWillMount() {\n      store.dispatch('@@krml/INIT')\n    }\n\n    render() {\n      return (\n        <Provider value={store}>\n          <WrappedComponent {...this.props} />\n        </Provider>\n      )\n    }\n  }\n}\n"],"names":["Component","displayName","name","constructor","context","createContext","defaultObject","withoutFunctions","Object","keys","object","reduce","acc","key","value","getDerivedStateFromProps","nextProps","prevState","store","injectedProps","injectFunction","ownProps","drivers","shallowEqual","state","getState","defaultListeners","Consumer","withInjectFunction","props","_this","this","unsubscribe","subscribe","_this2","newState","setState","React","propTypes","defaultProps","undefined","wrapper","WrappedComponent","WithConsumer","getWrappedDisplayName","Provider","dispatch","listeners","withListeners","toAction","suffix","type","toActionFactory","add","remove"],"mappings":"maACEA,EAAUC,aACPD,EAAUE,MACTF,EAAUG,aAAeH,EAAUG,YAAYD,MAChD,WCDDE,6BAGGA,IAASA,EAAUC,mBACjBD,29BCFHE,KAEAC,EAAmB,mBAAUC,OAChCC,KAAKC,GACLC,OACC,SAACC,EAAKC,OACEC,EAAQJ,EAAOG,SACA,mBAAVC,EAA6BF,OAC5BA,4HAAMC,EAAMC,KAE1BR,IAGES,EAA2B,mBAAkB,SAACC,EAAWC,OACrDC,EAAUD,EAAVC,MAGFC,EAAgBC,EAAeF,EAAOF,EAAUK,SAAUH,EAAMI,gBAIpEC,EACEhB,EAAiBU,EAAUE,eAC3BZ,EAAiBY,IAEZ,UAEGF,GAAWE,gBAAeK,MAAON,EAAMO,eC5B/CC,KAOApB,uBD+EUc,OACNO,EAAatB,IAAbsB,SACFC,EAzDQ,mBAAkB,sDAWpBC,4EACJA,IAEEX,EAAUW,EAAVX,eAEHM,MAAQT,EAAyBK,EAAzBL,CACXe,EAAKD,qBAGYvB,sFAQXY,EAAUa,KAAKF,MAAfX,WAEHc,YAAcd,EAAMe,UAAU,cAC7BC,EAAKV,MAAMA,QAAUN,EAAMO,WAAY,KACnCU,EAAWpB,EAAyBK,EAAzBL,CAAyCmB,EAAKL,MAAOK,EAAKV,OAE1D,OAAbW,GAAmBD,EAAKE,SAASD,0DAMpCH,qDAI+BD,KAAKP,MAAjCH,IAAAA,SAAUF,IAAAA,qBAGhBkB,gBAACrC,OACKqB,EACAF,WAjDiDkB,EAAMrC,aAC1De,yBAA2BA,EAAyBK,KAEpDkB,iBACE,kBAAM,SAGRC,yBACEC,MAiDkBC,CAAQrB,UAE5B,SAACpB,OACA0C,EAAmBd,EAAmB5B,GAEtC2C,EAAe,mBACnBN,0CACYA,gBAACK,GAAiBrB,SAAUQ,EAAOX,MAAOA,gBAI3CjB,sBAAwB2C,EAAsB5C,GAEpD2C,wBEpGKzB,OACN2B,EAAaxC,IAAbwC,gBAED,+MAIGC,SAAS,uDAKbT,mBAAUvB,MAAOI,mBACdwB,EAAqBX,KAAKF,eAVM7B,eAChCC,wBAA0B2C,EAAsBF,mCDsC3CK,yDAAYrB,EAAkBxB,eACpCyB,EAAatB,IAAbsB,SAEFqB,EArCQ,SAACD,EAAW7C,UAAS,SAACwC,WAC9BO,EARgB,SAAC/C,OACjBgD,GAAYhD,EAAO,IAAM,KAAKA,GAAQ,WACrC,sCAA4BiD,EAAOD,GAMzBE,CAAgBlD,+LAcrBgB,EAAUa,KAAKF,MAAfX,QAEF6B,UAAUM,IAAIN,KACdD,SAASG,EAAS,6DAIhB/B,EAAUa,KAAKF,MAAfX,QAEF4B,SAASG,EAAS,eAClBF,UAAUO,OAAOP,2CAIhBV,gBAACK,EAAqBX,KAAKF,MAAMR,iBA1BvBgB,EAAMrC,aAClBsC,iBACE,kBAAM,eACH,kBAAM,SAGXC,yBACEC,WACGlC,MA0BQmC,CAAQM,EAAW7C,UAElC,SAACF,OACA0C,EAAmBM,EAAchD,GAEjC2C,EAAe,mBACnBN,0CACYA,gBAACK,GAAiBrB,SAAUQ,EAAOX,MAAOA,gBAI3CjB,sBAAwB2C,EAAsB5C,GAEpD2C"}